
# Find ppcs
# This sets the following variables:
# PPCS_INCLUDE_DIRS
# PPCS_FOUND
if(NOT PPCS_INSTALL_ROOT)
	set(PPCS_INSTALL_ROOT $ENV{USR_INSTALL_ROOT}/ppcs/) 
endif()

if(NOT EXISTS ${PPCS_INSTALL_ROOT}/Include/PPCS_API.h)
	message(FATAL_ERROR "PPCS_INSTALL_ROOT [${PPCS_INSTALL_ROOT}] error.")
endif()

set(PPCS_API_INCLUDE_DIRS ${PPCS_INSTALL_ROOT}/Include)

if(CC_BC_WIN)
	find_library(PPCS_API_LIBRARIES_DEBUG
				NAMES PPCS_API
				PATHS "${PPCS_INSTALL_ROOT}/Lib/Windows/x64/")
				
	find_library(PPCS_API_LIBRARIES_RELEASE
			NAMES PPCS_API
			PATHS "${PPCS_INSTALL_ROOT}/Lib/Windows/x64/")
			
	set(PPCS_API_LOC_DEBUG "${PPCS_INSTALL_ROOT}/Lib/Windows/x64/PPCS_API.dll")
	set(PPCS_API_LOC_RELEASE "${PPCS_INSTALL_ROOT}/Lib/Windows/x64/PPCS_API.dll")
elseif(CC_BC_MAC)
	find_library(PPCS_API_LIBRARIES_DEBUG
				NAMES PPCS_API
				PATHS "${PPCS_INSTALL_ROOT}/Lib/osX/x64/")
				
	find_library(PPCS_API_LIBRARIES_RELEASE
			NAMES PPCS_API
			PATHS "${PPCS_INSTALL_ROOT}/Lib/osX/x64/")
elseif(CC_BC_LINUX)
	find_library(PPCS_API_LIBRARIES_DEBUG
				NAMES PPCS_API
				PATHS "${PPCS_INSTALL_ROOT}/Lib/Linux/x64/")
				
	find_library(PPCS_API_LIBRARIES_RELEASE
			NAMES PPCS_API
			PATHS "${PPCS_INSTALL_ROOT}/Lib/Linux/x64/")
endif()

if(CC_BC_LINUX OR CC_BC_MAC)
	set(PPCS_API_LOC_DEBUG ${PPCS_API_LIBRARIES_DEBUG})
	set(PPCS_API_LOC_RELEASE ${PPCS_API_LIBRARIES_RELEASE})
endif()

message("PPCS_API_INCLUDE_DIRS  ${PPCS_API_INCLUDE_DIRS}")
message("PPCS_API_LIBRARIES_DEBUG  ${PPCS_API_LIBRARIES_DEBUG}")
message("PPCS_API_LIBRARIES_RELEASE  ${PPCS_API_LIBRARIES_RELEASE}")

if(PPCS_API_INCLUDE_DIRS AND PPCS_API_LIBRARIES_DEBUG AND PPCS_API_LIBRARIES_RELEASE)
	set(PPCS_FOUND "True")
	__import_target(PPCS_API dll)
	message("import target PPCS_API +++++")
endif()
