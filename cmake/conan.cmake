list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/conan/")

# use presets
if(EXISTS ${CMAKE_SOURCE_DIR}/CMakeUserPresets.json
	OR EXISTS ${CMAKE_SOURCE_DIR}/CMakePresets.json)
	message(STATUS "presets install_conan_deps -> ${CMAKE_BINARY_DIR}")

	if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
		message(STATUS "conanbuildinfo_multi.cmake exists, skip install_conan_deps")
	else()
		if(NOT EXISTS ${CMAKE_SOURCE_DIR}/conandata.yml)
			message(STATUS "conandata not exists, skip install_conan_deps")
		else()
			set(cmd_exe ${Python3_EXECUTABLE})
			set(cmd_script ${CMAKE_CURRENT_SOURCE_DIR}/cmake/pmodules/ci_conan.py)
			set(ARGS "${cmd_script}" ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})

			message(STATUS "presets execute: ${Python3_EXECUTABLE} ${cmd_script} ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}")
			execute_process(
				COMMAND ${cmd_exe} ${ARGS}
				RESULT_VARIABLE RESULT
				OUTPUT_VARIABLE OUTPUT
			)

			if(NOT RESULT EQUAL "0")
				message(FATAL_ERROR "presets install_conan_deps failed : ${OUTPUT}")
			else()
				message("presets install_conan_deps successful : ${OUTPUT}")
			endif()
		endif()
	endif()
endif()

if(EXISTS ${CMAKE_BINARY_DIR}/conan_paths.cmake)
	include(${CMAKE_BINARY_DIR}/conan_paths.cmake)
	message(STATUS "Conan Use conan_paths.cmake")
	set(HAVE_CONAN_CACHE 1)
elseif(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
	include(${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
	message(STATUS "Conan Use conanbuildinfo_multi.cmake")
	set(HAVE_CONAN_CACHE 1)
else()
	message(STATUS "Disable Conan")
	set(HAVE_CONAN_CACHE 0)
	if(CMAKE_USE_CONAN)
		message(STATUS "CMAKE_USE_CONAN, But Disabled")
	endif()
endif()

if(CMAKE_USE_CONAN)
endif()

macro(__conan_find)
	if(TARGET ${ARGN})
	else()
		message(STATUS "CONAN ****** Start Find ${ARGN}")
		find_package(_conan_${ARGN})
		message(STATUS "CONAN ****** End Find ${ARGN}")
	endif()
endmacro()

macro(__conan_import package type)
	cmake_parse_arguments(package "" "" "COMPONENT;INTERFACE_DEF;ILIB" ${ARGN})
	set(Components)
	if(package_COMPONENT)
		set(Components ${package_COMPONENT})
	else()
		set(Components ${package})
	endif()
	message(STATUS "__conan_import ${package} [${Components}]")
	
	string(TOUPPER ${package} UPPER_PACKAGE)
	if(CONAN_${UPPER_PACKAGE}_ROOT_RELEASE OR CONAN_${UPPER_PACKAGE}_ROOT_DEBUG)
		set(DEBUG_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_DEBUG})
		set(RELEASE_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_RELEASE})
		
		if(CONAN_FORCE_RELEASE_CONFIG)
			set(INC_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE})
			set(LIB_DEBUG_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE})	
			set(LIB_RELEASE_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE})
			set(BIN_DEBUG_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE})
			set(BIN_RELEASE_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE})
		else()
			set(INC_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE})
			if(NOT CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE)
				set(INC_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_DEBUG})
			endif()
			
			set(LIB_DEBUG_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_DEBUG})
			if(NOT CONAN_LIB_DIRS_${UPPER_PACKAGE}_DEBUG)
				set(LIB_DEBUG_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE})
			endif()		
			set(LIB_RELEASE_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE})
			if(NOT CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE)
				set(LIB_RELEASE_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_DEBUG})
			endif()
			set(BIN_DEBUG_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_DEBUG})
			if(NOT CONAN_BIN_DIRS_${UPPER_PACKAGE}_DEBUG)
				set(BIN_DEBUG_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE})
			endif()
			set(BIN_RELEASE_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE})
			if(NOT CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE)
				set(BIN_RELEASE_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_DEBUG})
			endif()
		endif()
		
		set(LIB_TYPE ${type})
		foreach(_component ${Components})
			if(NOT TARGET ${_component})
				message(STATUS "__conan_import target ${package} [${_component}]")
	
				set(${_component}_INCLUDE_DIRS ${INC_DIRS})
				
				if(CC_BC_WIN)
					set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/${_component}.lib")
					set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/${_component}.lib")
					set(${_component}_LOC_DEBUG "${BIN_DEBUG_DIRS}/${_component}.dll")
					set(${_component}_LOC_RELEASE "${BIN_RELEASE_DIRS}/${_component}.dll")
				elseif(CC_BC_LINUX)
					if(${type} STREQUAL "dll")
						set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.so")
						set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.so")
						set(${_component}_LOC_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.so")
						set(${_component}_LOC_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.so")
					else()
						set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.a")
						set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.a")
					endif()	
				elseif(CC_BC_MAC)
					if(${type} STREQUAL "dll")
						set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.dylib")
						set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.dylib")
						set(${_component}_LOC_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.dylib")
						set(${_component}_LOC_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.dylib")
					else()
						set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.a")
						set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.a")
					endif()	
				elseif(CC_BC_EMCC)
					set(${_component}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${_component}.a")
					set(${_component}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${_component}.a")
					set(LIB_TYPE lib)
				endif()
				
				__test_import(${_component} ${LIB_TYPE})
				if(package_INTERFACE_DEF)
					set_property(TARGET ${_component} PROPERTY INTERFACE_COMPILE_DEFINITIONS ${package_INTERFACE_DEF})
				endif()
				if(package_ILIB)
					set(_LIBS)
					target_link_libraries(${_component} INTERFACE ${package_ILIB}
													)
				endif()					
			endif()
		endforeach()
	endif()
endmacro()

macro(__conan_find_data package)
	string(TOUPPER ${package} UPPER_PACKAGE)
	set(DATA_DEBUG ${CONAN_${UPPER_PACKAGE}_ROOT_DEBUG})
	set(DATA_RELEASE ${CONAN_${UPPER_PACKAGE}_ROOT_RELEASE})
endmacro()

macro(__conan_set_include package)
	cmake_parse_arguments(package "" "INTERFACE;INTERFACE_DEF" "" ${ARGN})
	string(TOUPPER ${package} UPPER_PACKAGE)
	
	set(${UPPER_PACKAGE}_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_DEBUG})
	if(CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE)
		set(${UPPER_PACKAGE}_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE})
	endif()

	if(NOT TARGET ${package})
		add_library(${package} INTERFACE)
		set_property(TARGET ${package} PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${${UPPER_PACKAGE}_INCLUDE_DIRS})
	
		if(package_INTERFACE_DEF)
			set_property(TARGET ${package} PROPERTY INTERFACE_COMPILE_DEFINITIONS ${package_INTERFACE_DEF})
		endif()
		message(STATUS "${package} ${UPPER_PACKAGE}_INCLUDE_DIRS ${${UPPER_PACKAGE}_INCLUDE_DIRS}")
	endif()
endmacro()

macro(__conan_import_one package type)
	cmake_parse_arguments(package "" "NAME;LIB;DLL;DLIB;DDLL;INC;INTERFACE_DEF" "" ${ARGN})

	string(TOUPPER ${package} UPPER_PACKAGE)
	if(CONAN_${UPPER_PACKAGE}_ROOT_RELEASE)
		set(DEBUG_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_DEBUG})
		set(RELEASE_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_RELEASE})
		
		set(INC_DIRS ${CONAN_INCLUDE_DIRS_${UPPER_PACKAGE}_RELEASE})
		set(LIB_DEBUG_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_DEBUG})
		set(LIB_RELEASE_DIRS ${CONAN_LIB_DIRS_${UPPER_PACKAGE}_RELEASE})
		set(BIN_DEBUG_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_DEBUG})
		if(NOT EXISTS ${BIN_DEBUG_DIRS})
			set(BIN_DEBUG_DIRS "${CONAN_${UPPER_PACKAGE}_ROOT_DEBUG}/bin")
		endif()
		set(BIN_RELEASE_DIRS ${CONAN_BIN_DIRS_${UPPER_PACKAGE}_RELEASE})
		if(NOT EXISTS ${BIN_RELEASE_DIRS})
			set(BIN_RELEASE_DIRS "${CONAN_${UPPER_PACKAGE}_ROOT_RELEASE}/bin")
		endif()
		
		if(NOT package_DLIB)
			set(package_DLIB ${package_LIB})
		endif()
		if(NOT package_DDLL)
			set(package_DDLL ${package_DLL})
		endif()
		if(package_LIB AND package_NAME)
			if(${type} STREQUAL "dll" AND NOT package_DLL)
				message(WARNING "__conan_import_one specify DLL")
			else()
				if(NOT TARGET ${package_NAME})
					message(STATUS "__conan_import target ${package} [${package_NAME}]")
		
					set(${package_NAME}_INCLUDE_DIRS ${INC_DIRS})
					if(package_INC)
						set(${package_NAME}_INCLUDE_DIRS ${package_INC})
					endif()
					if(CC_BC_WIN)
						set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/${package_DLIB}.lib")
						set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/${package_LIB}.lib")
						set(${package_NAME}_LOC_DEBUG "${BIN_DEBUG_DIRS}/${package_DDLL}.dll")
						set(${package_NAME}_LOC_RELEASE "${BIN_RELEASE_DIRS}/${package_DLL}.dll")
					elseif(CC_BC_LINUX)
						if(${type} STREQUAL "dll")
							set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${package_LIB}.so")
							set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${package_LIB}.so")
							set(${package_NAME}_LOC_DEBUG "${LIB_DEBUG_DIRS}/lib${package_DLL}.so")
							set(${package_NAME}_LOC_RELEASE "${LIB_RELEASE_DIRS}/lib${package_DLL}.so")
						
						elseif(${type} STREQUAL "ndll")
							set(${package_NAME}_LOC_RELEASE "${LIB_RELEASE_DIRS}/${package_DLL}")
							set(${package_NAME}_LOC_DEBUG "${LIB_DEBUG_DIRS}/${package_DLL}")
							set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/${package_LIB}")
							set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/${package_LIB}")
						else()
							set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${package_LIB}.a")
							set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${package_LIB}.a")
						endif()	
					elseif(CC_BC_EMCC)
						set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${package_LIB}.a")
						set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${package_LIB}.a")
					elseif(CC_BC_MAC)
						if(${type} STREQUAL "dll")
							set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${package_LIB}.dylib")
							set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${package_LIB}.dylib")
							set(${package_NAME}_LOC_DEBUG "${LIB_DEBUG_DIRS}/lib${package_DLL}.dylib")
							set(${package_NAME}_LOC_RELEASE "${LIB_RELEASE_DIRS}/lib${package_DLL}.dylib")
						else()
							set(${package_NAME}_LIBRARIES_DEBUG "${LIB_DEBUG_DIRS}/lib${package_LIB}.a")
							set(${package_NAME}_LIBRARIES_RELEASE "${LIB_RELEASE_DIRS}/lib${package_LIB}.a")
						endif()	
					endif()
					
					__test_import(${package_NAME} ${type})
					if(package_INTERFACE_DEF)
						set_property(TARGET ${package_NAME} PROPERTY INTERFACE_COMPILE_DEFINITIONS ${package_INTERFACE_DEF})
					endif()
				endif()
			endif()
		else()
			message(WARNING "__conan_import_one specify LIB and NAME")
		endif()
	endif()
endmacro()

macro(__import_multiconfig_common cmake_file debug_config)
	if(EXISTS ${cmake_file} AND EXISTS ${debug_config})
		include(${cmake_file})
		include(${debug_config})
	endif()
endmacro()

macro(__install_conan_deps)
	set(deps_dir ${CMAKE_BINARY_DIR}/deps/)
	list(PREPEND CMAKE_MODULE_PATH ${deps_dir})
	list(PREPEND CMAKE_PREFIX_PATH ${deps_dir})
	set(conan_file ${CMAKE_SOURCE_DIR}/conanfile.py)
	if(EXISTS ${conan_file} AND NOT EXISTS ${deps_dir})
		message(STATUS "__install_conan_deps -> ${deps_dir}")
		file(MAKE_DIRECTORY ${deps_dir})

		set(conan_profile "x64-debug")
		if(CMAKE_CONFIGURE_TYPE)
			set(conan_profile ${CMAKE_CONFIGURE_TYPE})
		endif()
		set(ARGS "install" "${CMAKE_SOURCE_DIR}" "--output-folder=${deps_dir}" "--profile" ${conan_profile})

		execute_process(
    		COMMAND "conan" ${ARGS}
    		RESULT_VARIABLE RESULT
    		OUTPUT_VARIABLE OUTPUT
		)
 
		if(NOT RESULT EQUAL "0")
    		message(FATAL_ERROR "__install_conan_deps run conan install failed : ${OUTPUT}")
		else()
    		message("__install_conan_deps run conan install successful : ${OUTPUT}")
		endif()
	endif()

	set(tool_chain_file ${deps_dir}/conan_toolchain.cmake)
	if(EXISTS ${tool_chain_file})
		include(${tool_chain_file})
	else()
		message(FATAL_ERROR "__install_conan_deps : please use cmaketoolchain to generate conan_toolchain.cmake")
	endif()
endmacro()