#version 300 es
/* antialiasing.fragment */
precision mediump float;

out vec4 fragColor;

in vec2 texCoord;

uniform vec2 textureSize;
uniform sampler2D screenTexture;
uniform int antiflag = 1;

vec4 AntiAlias_None(vec2 uv, vec2 texsize, sampler2D theTexture) 
{
    return texture2D(theTexture, uv / texsize, -99999.0);
}

//??UV?????????0.5???????????smoothstep????fwidth??????UV????????????????????????????????????UV?????????
vec4 AntiAliasPointSampleTexture_Smoothstep(vec2 uv, vec2 texsize, sampler2D theTexture) 
{    
    vec2 w=fwidth(uv);
    return texture2D(theTexture, (floor(uv)+0.5+smoothstep(0.5-w,0.5+w,fract(uv))) / texsize, -99999.0); 
}


vec4 AntiAliasPointSampleTexture_None(vec2 uv, vec2 texsize, sampler2D theTexture) 
{  
    return texture2D(theTexture, (floor(uv+0.5)+0.5) / texsize, -99999.0);
}

//?fwidth+clamp???????????????Linear????clamp??????????????UV?????????0.5????????????????????clamp????????????0?1????
vec4 AntiAliasPointSampleTexture_Linear(vec2 uv, vec2 texsize, sampler2D theTexture) 
{    
    vec2 w=fwidth(uv);
    return texture2D(theTexture, (floor(uv)+0.5+clamp((fract(uv)-0.5+w)/w,0.,1.)) / texsize, -99999.0);  
}



vec4 mYAntiAliasPointSampleTexture_Smoothstep(vec2 uv, vec2 texsize, sampler2D theTexture) 
{   
	// ?????fwidth(myVar)??GPU????myVar?????????????????????????X?Y???????????????????????????????????????
    vec2 w=fwidth(uv);
	
    return texture2D(theTexture, (floor(uv)+0.5+smoothstep(0.5-w,0.5+w,fract(uv))) / texsize, -99999.0); 
}


void main() 
{
	if( 1 == antiflag )
		fragColor = mYAntiAliasPointSampleTexture_Smoothstep(texCoord, textureSize, screenTexture);
	else
		fragColor = AntiAlias_None(texCoord, textureSize, screenTexture );

}
