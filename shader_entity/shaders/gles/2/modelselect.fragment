/* modelselect.fragment */

varying vec3 viewDirection;
varying vec3 normal;
varying vec3 worldPosition;

uniform vec4 ambient = vec4(0.4, 0.4, 0.4, 1.0);
uniform vec4 diffuse = vec4(0.6, 0.6, 0.6, 1.0);
uniform vec4 specular = vec4(0.125, 0.125, 0.125, 1.0);
uniform float specularPower = 12.0;

uniform vec3 lightDirection = vec3(0.0, 0.0, 1.0);
uniform float topVisibleHeight = 100000.0;
uniform float bottomVisibleHeight = -10000.0;
uniform float error;

uniform float state;
uniform float nozzle;
uniform vec4 stateColors[4];

vec4 directLight(vec3 light_dir, vec3 fnormal, vec4 core_color, vec4 ambient_color, vec4 diffuse_color, vec4 specular_color)
{
	float NdotL 		  = max(dot(fnormal, light_dir), 0.0);
	ambient_color 	  	  = ambient_color * core_color;

	vec3 freflection      = reflect(-light_dir, fnormal);
	vec3 fViewDirection   = normalize(viewDirection);
	float RdotV           = max(0.0, dot(freflection, fViewDirection)); 
	
	diffuse_color		  = NdotL * diffuse_color * core_color;
	specular_color        = specular_color * pow( RdotV, specularPower);
	
	return ambient_color + diffuse_color + specular_color;
}

void main( void )
{
	if(worldPosition.z < bottomVisibleHeight || worldPosition.z > topVisibleHeight)
		discard;

	vec4 color = stateColors[int(state)];	
	if(error == 1.0)
		color = stateColors[3];
		
	vec4 back_color = color;
//	back_color.rgb = vec3(1.0, 1.0, 1.0) - back_color.rgb;
	
	vec3 fnormal 		  =	normalize(normal);
	vec4 ambient_color 	  = ambient;
	vec4 diffuse_color    = diffuse;
	vec4 specular_color   = specular;
	
	vec4 coreColor = directLight(lightDirection, fnormal, color, ambient_color, diffuse_color, specular_color);
	vec4 coreColor_b = directLight(lightDirection, -fnormal, back_color, ambient_color - vec4(0.2, 0.2, 0.2, 0.0), diffuse_color, specular_color);
	
	coreColor.g += 0.4;
	coreColor.r += 0.4;
	
	coreColor_b.g += 0.2;
	coreColor_b.r += 0.2;
	
	coreColor.rgb = coreColor.rgb + vec3(0.1, -0.1, 0.0) * nozzle;
	coreColor_b.rgb = coreColor_b.rgb + vec3(0.1, -0.1, 0.0) * nozzle;
	
	if(gl_FrontFacing)
    {
        gl_FragColor = vec4(coreColor.rgb, 1.0);
    }
    else
    {
        gl_FragColor = vec4(coreColor_b.rgb, 0.4);
    }
	
//	gl_FragColor = vec4(coreColor.rgb, 1.0);
}
