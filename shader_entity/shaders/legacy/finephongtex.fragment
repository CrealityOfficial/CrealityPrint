#version 150 core 
out vec4 fragmentColor;

in vec3 viewDirection;
in vec3 normal;

uniform sampler2D shapeTexture;

in vec2 texcoord;

uniform vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ambient = vec4(0.7, 0.7, 0.7, 1.0);
uniform vec4 diffuse = vec4(0.3, 0.3, 0.3, 1.0);
uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);
uniform float specularPower = 128.0;

uniform vec3 lightDirection = vec3(0.0, 0.0, 1.0);

uniform float useAzi = 0.0;

vec2 azi_to_equ(vec2 tc)
{
	vec2 zaiTC = tc;
	if(useAzi == 1.0)
	{
		float PI = 3.1415926;
		vec2 t = vec2(tc.x - 0.5, tc.y - 0.5);
		float alpha = atan(t.y, t.x);
		float r = length(t);
		if(r > 0.5)
			zaiTC = vec2(-1.0, -1.0);
		else
		{
			float beta = 2 * PI * r;
			float x_ = 0.5 + 0.5 * alpha / PI;
			float y_= 1 - beta / PI;
			zaiTC = vec2(x_, y_);
		}
	}
	
	return zaiTC;
}

void main( void )
{
	vec3 fnormal 		  =	normalize(normal);
	vec4 specular_color   = specular;
	
	vec4 _color			  = color * texture(shapeTexture, azi_to_equ(texcoord));
	if(!gl_FrontFacing)
    {
		_color = vec4(0.65, 0.0, 0.0, 1.0);
    }
	
	float NdotL 		  = max(dot(fnormal, lightDirection), 0.0);
	vec4 ambientColor 	  = ambient * _color;
	vec3 freflection      = reflect(-lightDirection, fnormal);
	vec3 fViewDirection   = normalize(viewDirection);
	float RdotV           = max(0.0, dot(freflection, fViewDirection)); 
	vec4 diffuseColor     = NdotL * diffuse * _color;
	vec4 specularColor    = specular * pow( RdotV, specularPower);
	vec4 coreColor = ambientColor + diffuseColor + specularColor;
	fragmentColor = vec4(coreColor.rgb, 1.0);
}
