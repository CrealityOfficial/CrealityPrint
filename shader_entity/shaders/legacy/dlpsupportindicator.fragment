#version 150 core 
out vec4 fragmentColor;

in vec3 viewDirection;
in vec3 normal;
in vec3 worldPosition;

uniform vec4 ambient = vec4(0.0, 0.0, 0.0, 1.0);
uniform vec4 diffuse = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 specular = vec4(0.125, 0.125, 0.125, 1.0);
uniform float specularPower = 12.0;

uniform vec3 lightDirection = vec3(0.0, 0.0, 1.0);

uniform vec4 color;

void main( void )
{
	vec3 fnormal 		  =	normalize(normal);
	vec4 specular_color   = specular;
	
	float NdotL 		  = dot(fnormal, lightDirection);
	vec4 ambientColor 	  = ambient * color;
	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - lightDirection);
	vec3 fViewDirection   = normalize(viewDirection);
	float RdotV           = max(0.0, dot(freflection, fViewDirection)); 
	vec4 diffuseColor     = NdotL * diffuse * color;
	vec4 specularColor    = specular * pow( RdotV, specularPower);
	vec4 coreColor = ambientColor + diffuseColor + specularColor;	
	
    fragmentColor = vec4(coreColor.rgb, color.a);
}

