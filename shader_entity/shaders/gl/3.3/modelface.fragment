#version 150 core
out vec4 fragColor;

in vec3 viewDirection;
in vec3 normal;
in vec3 gnormal;
in vec3 worldPosition;
in vec3 worldWater;
in vec3 barycentric;
in vec3 gcolor;

uniform float transparency = 1.0;

uniform vec3 minSpace;
uniform vec3 maxSpace;
uniform float bottom; 
uniform float topVisibleHeight = 100000.0;
uniform float bottomVisibleHeight = -10000.0;
uniform float error;
uniform float supportCos = 0.5;

uniform int hoverState = 0;
uniform int checkscope = 1;

uniform float state;
uniform float nozzle;
uniform vec4 stateColors[6];
uniform int renderModel = 1;
uniform int useVertexColor = 0;

uniform sampler2D textureDiffuse;

uniform vec4 ambient = vec4(0.8, 0.8, 0.8, 1.0);
uniform vec4 diffuse = vec4(0.8, 0.8, 0.8, 1.0);
uniform vec4 specular = vec4(0.8, 0.8, 0.8, 1.0);
const float specularPower = 4.5;

bool frontFacing()
{
    vec3 fdx = dFdx(worldPosition);
    vec3 fdy = dFdy(worldPosition);
    return dot(gnormal, cross(fdx, fdy)) > 0.0;
} 

vec4 directLight(vec3 lightDir, vec3 fnormal, vec4 coreColor, vec4 ambient, vec4 diffuse, vec4 specular) 
{
    /* ambient */
	vec4 ambientColor = ambient * coreColor;

    /* diffuse */
	float NdotL = max(dot(fnormal, lightDir), 0.0);
	vec4 diffuseColor = NdotL * diffuse * coreColor;

    /* specular */
	vec3 freflection = reflect(-lightDir, fnormal);
	vec3 fViewDirection = normalize(viewDirection);
	float RdotV = max(0.0, dot(freflection, fViewDirection)); 
	vec4 specularColor = specular * pow( RdotV, specularPower) * coreColor;
	
	return ambientColor + diffuseColor + specularColor;
}

vec4 getColor()
{
	int stateInt = int(state);
    if (error > 0)
        return stateColors[3];
    else 
    {
        // if (useVertexColor == 1 && stateInt == 0) 
		//     return vec4(gcolor, 1.0);
        // else
        return stateColors[stateInt];
    }
}

void main( void )
{
	if (checkscope > 0 && (worldPosition.z < bottomVisibleHeight || worldPosition.z > topVisibleHeight))
		discard;

	vec3 fgnormal =	normalize(gnormal);
    vec3 lightDirection = vec3(1.0, 0.0, 1.0);
    vec3 fnormal 		  =	normalize(normal);
    vec4 _ambient = ambient;
    vec4 _diffuse = diffuse;
    vec4 _specular = specular;
    vec3 lightDir;
    vec4 color;

    if (frontFacing())
    {   /* 外壁渲染参数 */
        lightDir = normalize(dot(fnormal, lightDirection) * lightDirection);
        if(checkscope > 0 && 
            (worldPosition.x < minSpace.x || worldPosition.y < minSpace.y || worldPosition.z < minSpace.z || 
             worldPosition.x > maxSpace.x || worldPosition.y > maxSpace.y || worldPosition.z > maxSpace.z ||
             abs(worldPosition.z - bottom) < 0.05))
        {   /* 越界部分颜色 */
            color = stateColors[4];
        } 
        else 
        {
            color = getColor();

            if (hoverState > 0)
            {   
                float v = dot(fgnormal, vec3(0.0, 0.0, -1.0));
                color.r += (int(v >= supportCos) * 0.8 * v);
            }
            
            color.rgb = color.rgb + vec3(0.1, -0.1, 0.0) * nozzle;
        }
    }
    else 
    {   /* 内壁渲染参数 */
        _ambient = _ambient + vec4(0.2, 0.2, 0.2, 0.0);
        _diffuse = _diffuse + vec4(0.08, 0.08, 0.08, 0.0);
        lightDir = normalize(lightDirection);
        fnormal = -fnormal;
        color = stateColors[5];   
    }

    color = directLight(lightDir, fnormal, color, _ambient, _diffuse, _specular);
    fragColor = vec4(color.rgb, transparency);
} 


