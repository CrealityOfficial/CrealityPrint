#version 330 core

out vec4 fragmentColor;

in vec3 normal;
in vec3 gnormal;
in vec3 worldPosition;
in vec3 barycentric;
in float colorFlag;

uniform vec3 minSpace;
uniform vec3 maxSpace;
uniform float topVisibleHeight;
uniform float bottomVisibleHeight;
uniform int checkscope;
uniform int state;
uniform vec4 stateGain[4];
uniform vec4 outPlatformGain;
uniform vec4 palette[17];

const vec3 wireframeColor = vec3(0.1);

/* 光照参数 */
// 环境光 
vec3 LIGHT_TOP_DIR = vec3(-0.4574957, 0.4574957, 0.7624929);	
float LIGHT_TOP_DIFFUSE = 0.48;
float LIGHT_TOP_SPECULAR  = 0.15;
float LIGHT_TOP_SHININESS = 10.0;
// 反射光 
vec3 LIGHT_FRONT_DIR = vec3(0.6985074, 0.1397015, 0.5985074);
float LIGHT_FRONT_DIFFUSE = 0.54;
float LIGHT_FRONT_SPECULAR = 0.0;
float LIGHT_FRONT_SHININESS = 5.0;
vec3 LIGHT_BACK_DIR = vec3(0.1397015, 0.6985074,0.6985074);
float LIGHT_BACK_DIFFUSE = 0.18;
float INTENSITY_AMBIENT  =  0.3;

float brightness(vec3 color) {
    float bn = color.r * 0.3 + color.g * 0.59 + color.b * 0.11;
	return bn;
}

vec2 lightIntensity()
{
	vec2 intensity;
	vec3 eye_normal = normal;

	// Compute the cos of the angle between the normal and lights direction. The light is directional so the direction is constant for every vertex.
	// Since these two are normalized the cosine is the dot product. We also need to clamp the result to the [0,1] range.
	float NdotL = max(dot(eye_normal, LIGHT_TOP_DIR), 0.0);

	intensity.x = INTENSITY_AMBIENT + NdotL * LIGHT_TOP_DIFFUSE;
	vec3 position = worldPosition.xyz;
	intensity.y = LIGHT_TOP_SPECULAR * pow(max(dot(-normalize(position), reflect(LIGHT_TOP_DIR, eye_normal)), 0.0), LIGHT_TOP_SHININESS);

	// Perform the same lighting calculation for the 2nd light source (no specular applied).
	NdotL = max(dot(eye_normal, LIGHT_FRONT_DIR), 0.0);
	intensity.x += NdotL * LIGHT_FRONT_DIFFUSE;
	
	return intensity;
}

void main( void )
{
	if(checkscope > 0 && (worldPosition.z < bottomVisibleHeight || worldPosition.z > topVisibleHeight))
		discard;
	
	int cf = int(round(colorFlag));
	vec4 color = palette[cf];
	color = color * stateGain[state];

	vec3 fgnormal =	normalize(gnormal);
	
	if(worldPosition.x < minSpace.x || worldPosition.y < minSpace.y 
		|| worldPosition.x > maxSpace.x || worldPosition.y > maxSpace.y || worldPosition.z > maxSpace.z
		|| (abs(worldPosition.z - 0.0) < 0.01 && dot(gnormal, vec3(0.0, 0.0, -1.0)) > 0.99))
	{
		color = color * outPlatformGain;
	}

	vec3 baryDelta = fwidth(barycentric);
	vec3 edgeFactor = smoothstep(vec3(0.0), baryDelta * 1.0, barycentric);
	float minEdgeFactor = min(min(edgeFactor.x, edgeFactor.y), edgeFactor.z);
	color.rgb = mix(wireframeColor, color.rgb, minEdgeFactor);

	vec3 coreColor = color.rgb;
	vec2 intensity = lightIntensity();	//获取 环境光x 和 反射光y 强度
	float bn = brightness(coreColor);	
	float gainFactor = pow((1 - bn * 0.14), 2);	// 根据颜色亮度添加增益，避免暗色系太暗，亮色系太亮。(b - bn * k)中b越大, 暗色系越亮, k越大, 亮色系越暗
	vec3 gain = vec3(gainFactor, gainFactor, gainFactor);
	coreColor = mix(coreColor, gain, 0.17);	
	fragmentColor = vec4(vec3(intensity.y) + (coreColor * intensity.x), 1.0);
}
