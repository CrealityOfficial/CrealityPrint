{
	"line_width":
	{
		"label": "Line Width",
		"description": "Width of a single line. Generally, the width of each line should correspond to the width of the nozzle. However, slightly reducing this value could produce better prints.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "-1",
		"default_value": "0.4",
		"type": "float",
		"value": "eval(contex.value(\"machine_nozzle_size\"))",
		"settable_per_mesh": "true"
	},
	"wall_line_width":
	{
		"label": "Wall Line Width",
		"description": "Width of a single wall line.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"value": "eval(contex.value(\"line_width\"))",
		"default_value": "0.4",
		"type": "float",
		"limit_to_extruder": "wall_0_extruder_nr if wall_x_extruder_nr == wall_0_extruder_nr else -1",
		"settable_per_mesh": "true"
	},
	"wall_line_width_0":
	{
		"label": "Outer Wall Line Width",
		"description": "Width of the outermost wall line. By lowering this value, higher levels of detail can be printed.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "eval(contex.value(\"outer_inset_first\")) ? (0.4 * eval(contex.value(\"machine_nozzle_size\")) + 0.1) : 0.1 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"default_value": "0.4",
		"value": "eval(contex.value(\"wall_line_width\"))",
		"type": "float",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": "true"
	},
	"wall_line_width_x":
	{
		"label": "Inner Wall(s) Line Width",
		"description": "Width of a single wall line for all wall lines except the outermost one.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"default_value": "0.4",
		"value": "eval(contex.value(\"wall_line_width\"))",
		"type": "float",
		"limit_to_extruder": "wall_x_extruder_nr",
		"settable_per_mesh": "true"
	},
	"skin_line_width":
	{
		"label": "Top/Bottom Line Width",
		"description": "Width of a single top/bottom line.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"default_value": "0.4",
		"type": "float",
		"value": "eval(contex.value(\"line_width\"))",
		"enabled": "(eval(contex.value(\"top_layers\")) > 0) || (eval(contex.value(\"bottom_layers\")) > 0)",
		"limit_to_extruder": "top_bottom_extruder_nr",
		"settable_per_mesh": "true"
	},
	"roofing_line_width":
	{
		"label": "Top Surface Skin Line Width",
		"description": "Width of a single line of the areas at the top of the print.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.1 + (0.4 * eval(contex.value(\"machine_nozzle_size\")))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"default_value": "0.4",
		"type": "float",
		"value": "eval(contex.value(\"skin_line_width\"))",
		"limit_to_extruder": "roofing_extruder_nr",
		"settable_per_mesh": "true",
		"enabled": "eval(contex.value(\"roofing_layer_count\")) > 0 && eval(contex.value(\"top_layers\")) > 0"
	},
	"infill_line_width":
	{
		"label": "Infill Line Width",
		"description": "Width of a single infill line.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"parameter_level": "2",
		"default_value": "0.4",
		"type": "float",
		"value": "eval(contex.value(\"line_width\"))",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": "true"
	},
	"skirt_brim_line_width":
	{
		"label": "Skirt/Brim Line Width",
		"description": "Width of a single skirt or brim line.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"default_value": "0.4",
		"type": "float",
		"value": "eval(contex.value(\"line_width\"))",
		"enabled": "getEnumValue(\"adhesion_type\") == 'skirt' || getEnumValue(\"adhesion_type\") == 'brim' || eval(contex.value(\"prime_tower_brim_enable\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"support_line_width":
	{
		"label": "Support Line Width",
		"description": "Width of a single support structure line.",
		"unit": "mm",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "3 * eval(contex.value(\"machine_nozzle_size\"))",
		"default_value": "0.4",
		"type": "float",
		"enabled": "(eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"value": "eval(contex.value(\"line_width\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"support_interface_line_width":
	{
		"label": "Support Interface Line Width",
		"description": "Width of a single line of support roof or floor.",
		"unit": "mm",
		"default_value": "0.4",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"type": "float",
		"enabled": "(eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\"))) && eval(contex.value(\"support_interface_enable\"))",
		"limit_to_extruder": "support_interface_extruder_nr",
		"value": "eval(contex.value(\"line_width\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"support_roof_line_width":
	{
		"label": "Support Roof Line Width",
		"description": "Width of a single support roof line.",
		"unit": "mm",
		"default_value": "0.4",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"type": "float",
		"enabled": "(eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\"))) && eval(contex.value(\"support_roof_enable\"))",
		"limit_to_extruder": "support_roof_extruder_nr",
		"value": "eval(contex.value(\"support_interface_line_width\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"support_bottom_line_width":
	{
		"label": "Support Floor Line Width",
		"description": "Width of a single support floor line.",
		"unit": "mm",
		"default_value": "0.4",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"type": "float",
		"enabled": "(eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\"))) && eval(contex.value(\"support_bottom_enable\"))",
		"limit_to_extruder": "support_bottom_extruder_nr",
		"value": "eval(contex.value(\"support_interface_line_width\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"prime_tower_line_width":
	{
		"label": "Prime Tower Line Width",
		"description": "Width of a single prime tower line.",
		"type": "float",
		"unit": "mm",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "0.4",
		"value": "eval(contex.value(\"line_width\"))",
		"minimum_value": "0.001",
		"minimum_value_warning": "0.4 * eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "2 * eval(contex.value(\"machine_nozzle_size\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"initial_layer_line_width_factor":
	{
		"label": "Initial Layer Line Width",
		"description": "Multiplier of the line width on the first layer. Increasing this could improve bed adhesion.",
		"type": "float",
		"unit": "%",
		"default_value": "100.0",
		"minimum_value": "0.001",
		"maximum_value_warning": "150",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_enable":
	{
		"label": "Enable Retraction",
		"description": "Retract the filament when the nozzle is moving over a non-printed area. ",
		"type": "bool",
		"default_value": "true",
		"parameter_level": "1",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_wipe":
	{
		"label": "Retraction Wipe",
		"description": "Wipe the nozzle when retraction. ",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "1",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"wipe_length":
	{
		"label": "Wipe length",
		"description": "Wipe the length of the nozzle when retraction.",
		"unit": "mm",
		"type": "float",
		"default_value": "2",
		"minimum_value": "0.0001",
		"maximum_value": "10",
		"minimum_value_warning": "1",
		"maximum_value_warning": "5",
		"enabled": "eval(contex.value(\"retraction_wipe\"))",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"before_wipe_retraction_amount_percent":
	{
		"label": "Before Wipe Retraction Amount Percent",
		"description": "before wipe retraction amount percent.",
		"unit": "%",
		"type": "float",
		"default_value": "70",
		"minimum_value": "1",
		"maximum_value": "100",
		"minimum_value_warning": "10",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"retraction_wipe\"))",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retract_at_layer_change":
	{
		"label": "Retract at Layer Change",
		"description": "Retract the filament when the nozzle is moving to the next layer.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "2",
		"settable_per_mesh": "true",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_extruder": "true"
	},
	"retraction_amount":
	{
		"label": "Retraction Distance",
		"description": "The length of material retracted during a retraction move.",
		"unit": "mm",
		"type": "float",
		"default_value": "8.0",
		"minimum_value_warning": "-0.0001",
		"maximum_value_warning": "50.0",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"retraction_enable\")) && getEnumValue(\"machine_gcode_flavor\") != 'UltiGCode'",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_speed":
	{
		"label": "Retraction Speed",
		"description": "The speed at which the filament is retracted and primed during a retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "60",
		"minimum_value": "0.0001",
		"minimum_value_warning": "1",
		"maximum_value": "200",
		"maximum_value_warning": "100",
		"parameter_level": "-2",
		"enabled": "eval(contex.value(\"retraction_enable\")) && getEnumValue(\"machine_gcode_flavor\") != 'UltiGCode'",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_retract_speed":
	{
		"label": "Retraction Retract Speed",
		"description": "The speed at which the filament is retracted during a retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "60",
		"minimum_value": "0.0001",
		"maximum_value": "200",
		"minimum_value_warning": "1",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"retraction_enable\")) && getEnumValue(\"machine_gcode_flavor\") != 'UltiGCode'",
		"value": "eval(contex.value(\"retraction_speed\"))",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_prime_speed":
	{
		"label": "Retraction Prime Speed",
		"description": "The speed at which the filament is primed during a retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "60",
		"minimum_value": "0.0001",
		"maximum_value": "200",
		"minimum_value_warning": "1",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"retraction_enable\")) && getEnumValue(\"machine_gcode_flavor\") != 'UltiGCode'",
		"value": "eval(contex.value(\"retraction_speed\"))",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_extra_prime_amount":
	{
		"label": "Retraction Extra Prime Amount",
		"description": "Some material can ooze away during a travel move, which can be compensated for here.",
		"unit": "mm³",
		"type": "float",
		"default_value": "0",
		"minimum_value_warning": "-10",
		"maximum_value_warning": "5.0",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_min_travel":
	{
		"label": "Retraction Minimum Travel",
		"description": "The minimum distance of travel needed for a retraction to happen at all. This helps to get fewer retractions in a small area.",
		"unit": "mm",
		"type": "float",
		"default_value": "1.5",
		"value": "eval(contex.value(\"line_width\")) * 2",
		"minimum_value": "0",
		"minimum_value_warning": "eval(contex.value(\"line_width\")) * 1.5",
		"maximum_value_warning": "10",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_count_max":
	{
		"label": "Maximum Retraction Count",
		"description": "This setting limits the number of retractions occurring within the minimum extrusion distance window. Further retractions within this window will be ignored. This avoids retracting repeatedly on the same piece of filament, as that can flatten the filament and cause grinding issues.",
		"default_value": "100",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"type": "int",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"parameter_level": "2",
		"settable_per_extruder": "true"
	},
	"retraction_extrusion_window":
	{
		"label": "Minimum Extrusion Distance Window",
		"description": "The window in which the maximum retraction count is enforced. This value should be approximately the same as the retraction distance, so that the number of times a retraction passes the same patch of material can be effectively limited.",
		"unit": "mm",
		"type": "float",
		"default_value": "2",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"retraction_amount\")) * 2",
		"value": "eval(contex.value(\"retraction_amount\"))",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"parameter_level": "2",
		"settable_per_extruder": "true"
	},
	"limit_support_retractions":
	{
		"label": "Limit Support Retractions",
		"description": "Omit retraction when moving from support to support in a straight line. Enabling this setting saves print time, but can lead to excessive stringing within the support structure.",
		"type": "bool",
		"default_value": "true",
		"enabled": "eval(contex.value(\"retraction_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"settable_per_mesh": "false",
		"parameter_level": "1",
		"settable_per_extruder": "true"
	},
	"retraction_combing":
	{
		"label": "Combing Mode",
		"description": "Combing keeps the nozzle within already printed areas when traveling. This results in slightly longer travel moves but reduces the need for retractions. If combing is off, the material will retract and the nozzle moves in a straight line to the next point. It is also possible to avoid combing over top/bottom skin areas or to only comb within the infill.",
		"type": "enum",
		"options":
		{
			"off": "Off",
			"all": "All",
			"noskin": "Not in Skin",
			"no_outer_surfaces": "Reduce Cross Outer Surfaces",
			"infill": "Within Infill"
		},
		"default_value":"infill",
		"value":"eval(contex.value(\"retraction_hop_enabled\")) == true ?  'off' : 'no_outer_surfaces'",
		"resolve": "'noskin' if 'noskin' in extruderValues('retraction_combing') else ('infill' if 'infill' in extruderValues('retraction_combing') else ('all' if 'all' in extruderValues('retraction_combing') else 'off'))",
		"parameter_level": "1",
		"settable_per_mesh": "false",
		"settable_per_extruder": "false"
	},
	"retraction_combing_max_distance":
	{
		"label": "Max Comb Distance With No Retract",
		"description": "When non-zero, combing travel moves that are longer than this distance will use retraction.",
		"unit": "mm",
		"type": "float",
		"default_value": "15",
		"minimum_value": "0",
		"enabled": "getEnumValue(\"retraction_combing\") != 'off'",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_during_traveling":
	{
		"label": "Retraction During Traveling",
		"description": "Retract when traveling. ",
		"type": "bool",
		"default_value": "false",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"travel_retract_before_outer_wall":
	{
		"label": "Retract Before Outer Wall",
		"description": "Always retract when moving to start an outer wall.",
		"type": "bool",
		"default_value": "true",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "false"
	},
	"travel_avoid_other_parts":
	{
		"label": "Avoid Printed Parts When Traveling",
		"description": "The nozzle avoids already printed parts when traveling. This option is only available when combing is enabled.",
		"type": "bool",
		"default_value": "true",
		"parameter_level": "2",
		"enabled": "getEnumValue(\"retraction_combing\") != 'off'",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"travel_avoid_supports":
	{
		"label": "Avoid Supports When Traveling",
		"description": "The nozzle avoids already printed supports when traveling. This option is only available when combing is enabled.",
		"type": "bool",
		"default_value": "true",
		"parameter_level": "2",
		"enabled": "getEnumValue(\"retraction_combing\") != 'off' && eval(contex.value(\"travel_avoid_other_parts\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"travel_avoid_distance":
	{
		"label": "Travel Avoid Distance",
		"description": "The distance between the nozzle and already printed parts when avoiding during travel moves.",
		"unit": "mm",
		"type": "float",
		"default_value": "0.625",
		"value": "eval(contex.value(\"machine_nozzle_tip_outer_diameter\")) / 2 * 1.25",
		"minimum_value": "0",
		"minimum_value_warning": "eval(contex.value(\"machine_nozzle_tip_outer_diameter\")) * 0.5",
		"maximum_value_warning": "eval(contex.value(\"machine_nozzle_tip_outer_diameter\")) * 5",
		"parameter_level": "2",
		"enabled": "getEnumValue(\"retraction_combing\") != 'off' && eval(contex.value(\"travel_avoid_other_parts\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"layer_start_x":
	{
		"label": "Layer Start X",
		"description": "The X coordinate of the position near where to find the part to start printing each layer.",
		"unit": "mm",
		"type": "float",
		"default_value": "0.0",
		"minimum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"machine_width\")) /-2 : 0",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true",
		"settable_per_meshgroup": "true"
	},
	"layer_start_y":
	{
		"label": "Layer Start Y",
		"description": "The Y coordinate of the position near where to find the part to start printing each layer.",
		"unit": "mm",
		"type": "float",
		"default_value": "0.0",
		"minimum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"machine_depth\")) /-2 : 0",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true",
		"settable_per_meshgroup": "true"
	},
	"retraction_hop_enabled": {
		"label": "Z Hop When Retracted",
		"description": "Whenever a retraction is done, the build plate is lowered to create clearance between the nozzle and the print. It prevents the nozzle from hitting the print during travel moves, reducing the chance to knock the print from the build plate.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "1",
		"enabled": "eval(contex.value(\"retraction_enable\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_hop_only_when_collides": {
		"label": "Z Hop Only Over Printed Parts",
		"description": "Only perform a Z Hop when moving over printed parts which cannot be avoided by horizontal motion by Avoid Printed Parts when Traveling.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"retraction_hop_enabled\")) && eval(contex.value(\"travel_avoid_other_parts\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_hop": {
		"label": "Z Hop Height",
		"description": "The height difference when performing a Z Hop.",
		"unit": "mm",
		"type": "float",
		"default_value": "0.2",
		"minimum_value_warning": "0",
		"maximum_value_warning": "10",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"retraction_hop_enabled\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_hop_type":
	{
		"label": "Retraction Z Hop Type",
		"description": "Z Hop Type when retraction ",
		"type": "enum",
		"options":
		{
			"directlift": "DirectLift",
			"spirallift": "SpiralLift",
			"trapezoidalleft": "TrapezoidalLeft"
		},
		"default_value": "DirectLift",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"retraction_hop_enabled\"))",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_hop_after_extruder_switch": {
		"label": "Z Hop After Extruder Switch",
		"description": "After the machine switched from one extruder to the other, the build plate is lowered to create clearance between the nozzle and the print. This prevents the nozzle from leaving oozed material on the outside of a print.",
		"type": "bool",
		"default_value": "true",
		"enabled": "eval(contex.value(\"retraction_hop_enabled\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"parameter_level": "2",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	},
	"retraction_hop_after_extruder_switch_height": 
	{
		"label": "Z Hop After Extruder Switch Height",
		"description": "The height difference when performing a Z Hop after extruder switch.",
		"unit": "mm",
		"type": "float",
		"default_value": "1",
		"value": "eval(contex.value(\"retraction_hop\"))",
		"minimum_value_warning": "0",
		"maximum_value_warning": "10",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"retraction_hop_after_extruder_switch\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"settable_per_mesh": "false",
		"settable_per_extruder": "true"
	}
}