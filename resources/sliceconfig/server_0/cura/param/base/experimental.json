{
	"special_object_cancel": 
	{
		"label": "Exclude Objects",
		"description": "Exclude individual objects while a print is in progress",
		"type": "bool",
		"parameter_level": "1",
		"default_value": "false",
		"settable_per_mesh": true
	},
	"special_exact_flow_enable": 
	{
		"label": "Exact Flow Enable",
		"description": "Exact Flow Enable",
		"type": "bool",
		"parameter_level": "1",
		"default_value": "false",
		"settable_per_mesh": true
	},
	"zadjust_enable":
	{
		"label": "Enable Gcode offset(Z)",
		"description": "enable the offset of gcode in the z-direction.",
		"type": "bool",
		"parameter_level": "3",
		"default_value": "false",
		"enabled": "getEnumValue(\"machine_gcode_flavor\") == 'Klipper' || getEnumValue(\"machine_gcode_flavor\") == '4408'",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"gcode_offset_zadjust":
	{
		"label": "Gcode offset(Z)",
		"description": "The gcode is globally offset in the z-direction.",
		"unit": "mm",
		"type": "float",
		"minimum_value": "-1",
		"maximum_value": "1",
		"maximum_value_warning": "0.5",
		"default_value": "-0.05",
		"enabled": "eval(contex.value(\"zadjust_enable\"))",
		"parameter_level": "4",
		"settable_per_mesh": true,
		"settable_per_extruder": true,
		"settable_per_meshgroup": true
	},
	"coasting_enable":
	{
		"label": "Enable Coasting",
		"description": "Coasting replaces the last part of an extrusion path with a travel path. The oozed material is used to print the last piece of the extrusion path in order to reduce stringing.",
		"type": "bool",
		"parameter_level": "1",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"coasting_volume":
	{
		"label": "Coasting Volume",
		"description": "This volume will ooze out if not coastig. This value should generally be close to the nozzle diameter cubed.",
		"unit": "mm³",
		"type": "float",
		"default_value": "0.064",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"machine_nozzle_size\")) * 5",
		"enabled": "eval(contex.value(\"coasting_enable\"))",
		"parameter_level": "2",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"coasting_speed":
	{
		"label": "Coasting Speed",
		"description": "The speed by which to move during coasting, relative to the speed of the extrusion path. A value slightly under 100% is advised, since during the coasting move the pressure in the bowden tube drops.",
		"unit": "%",
		"type": "float",
		"default_value": "90",
		"minimum_value": "0.0001",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"coasting_enable\"))",
		"parameter_level": "2",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"coasting_min_volume":
	{
		"label": "Minimum Volume Before Coasting",
		"description": "The smallest volume an extrusion path should have before allowing coasting. For smaller extrusion paths, less pressure has been built up in the bowden tube and so the coasted volume is scaled linearly. This value should always be larger than the Coasting Volume.",
		"unit": "mm³",
		"type": "float",
		"default_value": "0.8",
		"minimum_value": "0",
		"maximum_value_warning": "10.0",
		"parameter_level": "2",
		"enabled": false,
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"slicing_tolerance":
	{
		"label": "Slicing Tolerance",
		"description": "How to slice layers with diagonal surfaces. The areas of a layer can be generated based on where the middle of the layer intersects the surface (Middle). Alternatively each layer can have the areas which fall inside of the volume throughout the height of the layer (Exclusive) or a layer has the areas which fall inside anywhere within the layer (Inclusive). Exclusive retains the most details, Inclusive makes for the best fit and Middle takes the least time to process.",
		"type": "enum",
		"options":
		{
			"middle": "Middle",
			"exclusive": "Exclusive",
			"inclusive": "Inclusive"
		},
		"default_value": "middle",
		"settable_per_mesh": true
	},
	"slice_accelerate_enabled":
	{
		"label": "Enable Slice Accelerate",
		"description": "The model with a large number of facets is simplified to achieve the effect of accelerating slicing by subtracting facets.",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"infill_enable_travel_optimization":
	{
		"label": "Infill Travel Optimization",
		"description": "When enabled, the order in which the infill lines are printed is optimized to reduce the distance travelled. The reduction in travel time achieved largely depends on the model being sliced, infill pattern, density, etc. Note that, for some models that have many small areas of infill, the time to slice the model may be greatly increased.",
		"type": "bool",
		"enabled": "getEnumValue(\"retraction_combing\") != 'off'",
		"default_value": "false",
		"settable_per_mesh": true
	},		
	"minimum_polygon_circumference":
	{
		"label": "Minimum Polygon Circumference",
		"description": "Polygons in sliced layers that have a circumference smaller than this amount will be filtered out. Lower values lead to higher resolution mesh at the cost of slicing time. It is meant mostly for high resolution SLA printers and very tiny 3D models with a lot of details.",
		"unit": "mm",
		"type": "float",
		"default_value": "1.0",
		"minimum_value": "0",
		"minimum_value_warning": "0.05",
		"maximum_value_warning": "20.0",
		"settable_per_mesh": true,
		"settable_per_extruder": false
	},
	"support_skip_some_zags":
	{
		"label": "Break Up Support In Chunks",
		"description": "Skip some support line connections to make the support structure easier to break away. This setting is applicable to the Zig Zag support infill pattern.",
		"type": "bool",
		"default_value": "false",
		"enabled": "eval(contex.value(\"support_enable\")) && (getEnumValue(\"support_pattern\") == 'zigzag')",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"support_skip_zag_per_mm":
	{
		"label": "Support Chunk Size",
		"description": "Leave out a connection between support lines once every N millimeter to make the support structure easier to break away.",
		"type": "float",
		"unit": "mm",
		"default_value": "20",
		"minimum_value": "0",
		"minimum_value_warning": "eval(contex.value(\"support_line_distance\"))",
		"enabled": "eval(contex.value(\"support_enable\")) && (getEnumValue(\"support_pattern\") == 'zigzag') && eval(contex.value(\"support_skip_some_zags\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"support_zag_skip_count":
	{
		"label": "Support Chunk Line Count",
		"description": "Skip one in every N connection lines to make the support structure easier to break away.",
		"type": "int",
		"default_value": "5",
		"value": "eval(contex.value(\"support_line_distance\")) == 0 ? 0 : Number(eval(contex.value(\"support_skip_zag_per_mm\")) / eval(contex.value(\"support_line_distance\"))).toFixed()",
		"minimum_value": "1",
		"minimum_value_warning": "eval(contex.value(\"support_line_distance\")) == 0 ? 0 :3",
		"enabled": "eval(contex.value(\"support_enable\")) && (getEnumValue(\"support_pattern\") == 'zigzag') && eval(contex.value(\"support_skip_some_zags\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"draft_shield_enabled":
	{
		"label": "Enable Draft Shield",
		"description": "This will create a wall around the model, which traps (hot) air and shields against exterior airflow. Especially useful for materials which warp easily.",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"draft_shield_dist":
	{
		"label": "Draft Shield X/Y Distance",
		"description": "Distance of the draft shield from the print, in the X/Y directions.",
		"unit": "mm",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "10",
		"default_value": "10",
		"resolve": "max(extruderValues('draft_shield_dist'))",
		"enabled": "eval(contex.value(\"draft_shield_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"draft_shield_height_limitation":
	{
		"label": "Draft Shield Limitation",
		"description": "Set the height of the draft shield. Choose to print the draft shield at the full height of the model or at a limited height.",
		"type": "enum",
		"options":
		{
			"full": "Full",
			"limited": "Limited"
		},
		"default_value": "full",
		"resolve": "'full' if 'full' in extruderValues('draft_shield_height_limitation') else 'limited'",
		"enabled": "eval(contex.value(\"draft_shield_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"draft_shield_height":
	{
		"label": "Draft Shield Height",
		"description": "Height limitation of the draft shield. Above this height no draft shield will be printed.",
		"unit": "mm",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "9999",
		"default_value": "10",
		"value": "10",
		"enabled": "eval(contex.value(\"draft_shield_enabled\")) && getEnumValue(\"draft_shield_height_limitation\") == 'limited'",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"conical_overhang_enabled":
	{
		"label": "Make Overhang Printable",
		"description": "Change the geometry of the printed model to minimize the support required. Steep overhangs will become shallow. Overhanging areas will drop down to become more vertical.",
		"type": "bool",
		"parameter_level": "1",
		"default_value": "false"
	},
	"conical_overhang_angle":
	{
		"label": "Maximum Model Angle",
		"description": "The maximum angle of overhangs after the they have been made printable. At a value of 0° all overhangs are replaced by a piece of model connected to the build plate, 90° will not change the model in any way.",
		"unit": "°",
		"type": "float",
		"minimum_value": "-89",
		"minimum_value_warning": "0",
		"maximum_value": "89",
		"default_value": "50",
		"enabled": "eval(contex.value(\"conical_overhang_enabled\"))"
	},
	"conical_overhang_hole_size": 
	{
		"label": "Maximum Overhang Hole Area",
		"description": "The maximum area of a hole in the base of the model before it's removed by Make Overhang Printable.  Holes smaller than this will be retained.  A value of 0 mm² will fill all holes in the models base.",
		"unit": "mm²",
		"type": "float",
		"minimum_value": "0",
		"minimum_value_warning": "0",
		"default_value": "0",
		"enabled": "conical_overhang_enabled"
	},
	"cross_infill_pocket_size":
	{
		"label": "Cross 3D Pocket Size",
		"description": "The size of pockets at four-way crossings in the cross 3D pattern at heights where the pattern is touching itself.",
		"unit": "mm",
		"type": "float",
		"default_value": "2.0",
		"value": "eval(contex.value(\"infill_line_distance\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"infill_line_distance\")) * Math.sqrt(2)",
		"enabled": "getEnumValue(\"infill_pattern\") == 'cross_3d'",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"cross_infill_density_image":
	{
		"label": "Cross Infill Density Image",
		"description": "The file location of an image of which the brightness values determine the minimal density at the corresponding location in the infill of the print.",
		"type": "str",
		"default_value": "",
		"enabled": "getEnumValue(\"infill_pattern\") == 'cross' || getEnumValue(\"infill_pattern\") == 'cross_3d'",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"cross_support_density_image":
	{
		"label": "Cross Fill Density Image for Support",
		"description": "The file location of an image of which the brightness values determine the minimal density at the corresponding location in the support.",
		"type": "str",
		"default_value": "",
		"enabled": "getEnumValue(\"support_pattern\") == 'cross' || getEnumValue(\"support_pattern\") == 'cross_3d'",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"spaghetti_infill_enabled":
	{
		"label": "Spaghetti Infill",
		"description": "Print the infill every so often, so that the filament will curl up chaotically inside the object. This reduces print time, but the behaviour is rather unpredictable.",
		"type": "bool",
		"default_value": "false",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_infill_stepped":
	{
		"label": "Spaghetti Infill Stepping",
		"description": "Whether to print spaghetti infill in steps or extrude all the infill filament at the end of the print.",
		"type": "bool",
		"default_value": "true",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_max_infill_angle":
	{
		"label": "Spaghetti Maximum Infill Angle",
		"description": "The maximum angle w.r.t. the Z axis of the inside of the print for areas which are to be filled with spaghetti infill afterwards. Lowering this value causes more angled parts in your model to be filled on each layer.",
		"unit": "°",
		"type": "float",
		"default_value": "10",
		"minimum_value": "0",
		"maximum_value": "90",
		"maximum_value_warning": "45",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\")) && eval(contex.value(\"spaghetti_infill_stepped\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_max_height":
	{
		"label": "Spaghetti Infill Maximum Height",
		"description": "The maximum height of inside space which can be combined and filled from the top.",
		"unit": "mm",
		"type": "float",
		"default_value": "2.0",
		"minimum_value": "layer_height",
		"maximum_value_warning": "10.0",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\")) && eval(contex.value(\"spaghetti_infill_stepped\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_inset":
	{
		"label": "Spaghetti Inset",
		"description": "The offset from the walls from where the spaghetti infill will be printed.",
		"unit": "mm",
		"type": "float",
		"default_value": "0.2",
		"minimum_value_warning": "0",
		"maximum_value_warning": "5.0",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_flow":
	{
		"label": "Spaghetti Flow",
		"description": "Adjusts the density of the spaghetti infill. Note that the Infill Density only controls the line spacing of the filling pattern, not the amount of extrusion for spaghetti infill.",
		"unit": "%",
		"type": "float",
		"default_value": "100",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"spaghetti_infill_extra_volume":
	{
		"label": "Spaghetti Infill Extra Volume",
		"description": "A correction term to adjust the total volume being extruded each time when filling spaghetti.",
		"unit": "mm³",
		"type": "float",
		"default_value": "20",
		"minimum_value_warning": "0",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0 && eval(contex.value(\"spaghetti_infill_enabled\"))",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"support_conical_enabled":
	{
		"label": "Enable Conical Support",
		"description": "Make support areas smaller at the bottom than at the overhang.",
		"type": "bool",
		"default_value": "false",
		"enabled": "eval(contex.value(\"support_enable\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": true
	},
	"support_conical_angle":
	{
		"label": "Conical Support Angle",
		"description": "The angle of the tilt of conical support. With 0 degrees being vertical, and 90 degrees being horizontal. Smaller angles cause the support to be more sturdy, but consist of more material. Negative angles cause the base of the support to be wider than the top.",
		"unit": "°",
		"type": "float",
		"minimum_value": "-90",
		"minimum_value_warning": "-45",
		"maximum_value_warning": "45",
		"maximum_value": "90",
		"default_value": "30",
		"enabled": "eval(contex.value(\"support_conical_enabled\")) && eval(contex.value(\"support_enable\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": true
	},
	"support_conical_min_width":
	{
		"label": "Conical Support Minimum Width",
		"description": "Minimum width to which the base of the conical support area is reduced. Small widths can lead to unstable support structures.",
		"unit": "mm",
		"default_value": "5.0",
		"minimum_value": "0",
		"minimum_value_warning": "eval(contex.value(\"machine_nozzle_size\")) * 3",
		"maximum_value_warning": "100.0",
		"type": "float",
		"enabled": "eval(contex.value(\"support_conical_enabled\")) && eval(contex.value(\"support_enable\")) && eval(contex.value(\"support_conical_angle\")) > 0",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": true
	},
	"magic_fuzzy_skin_enabled":
	{
		"label": "Fuzzy Skin",
		"description": "Randomly jitter while printing the outer wall, so that the surface has a rough and fuzzy look.",
		"type": "bool",
		"default_value": "false",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"magic_fuzzy_skin_outside_only":
	{
		"label": "Fuzzy Skin Outside Only",
		"description": "Jitter only the parts' outlines and not the parts' holes.",
		"type": "bool",
		"default_value": "false",
		"enabled": "eval(contex.value(\"magic_fuzzy_skin_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"magic_fuzzy_skin_thickness":
	{
		"label": "Fuzzy Skin Thickness",
		"description": "The width within which to jitter. It's advised to keep this below the outer wall width, since the inner walls are unaltered.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.3",
		"minimum_value": "0.001",
		"enabled": "eval(contex.value(\"magic_fuzzy_skin_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"magic_fuzzy_skin_point_density":
	{
		"label": "Fuzzy Skin Density",
		"description": "The average density of points introduced on each polygon in a layer. Note that the original points of the polygon are discarded, so a low density results in a reduction of the resolution.",
		"type": "float",
		"unit": "1/mm",
		"default_value": "1.25",
		"minimum_value": "0.008",
		"minimum_value_warning": "0.1",
		"maximum_value_warning": "10",
		"maximum_value": "2 / eval(contex.value(\"magic_fuzzy_skin_thickness\"))",
		"enabled": "eval(contex.value(\"magic_fuzzy_skin_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"magic_fuzzy_skin_point_dist":
	{
		"label": "Fuzzy Skin Point Distance",
		"description": "The average distance between the random points introduced on each line segment. Note that the original points of the polygon are discarded, so a high smoothness results in a reduction of the resolution. This value must be higher than half the Fuzzy Skin Thickness.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.8",
		"minimum_value": "eval(contex.value(\"magic_fuzzy_skin_thickness\")) / 2",
		"minimum_value_warning": "0.1",
		"maximum_value_warning": "10",
		"value": "eval(contex.value(\"magic_fuzzy_skin_point_density\")) == 0 ? 10000 :  1 / eval(contex.value(\"magic_fuzzy_skin_point_density\"))",
		"enabled": "eval(contex.value(\"magic_fuzzy_skin_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"flow_rate_max_extrusion_offset":
	{
		"label": "Flow Rate Compensation Max Extrusion Offset",
		"description": "The maximum distance in mm to move the filament to compensate for changes in flow rate.",
		"unit": "mm",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "10",
		"default_value": "0",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"flow_rate_extrusion_offset_factor":
	{
		"label": "Flow Rate Compensation Factor",
		"description": "How far to move the filament in order to compensate for changes in flow rate, as a percentage of how far the filament would move in one second of extrusion.",
		"unit": "%",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"default_value": "100",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_enabled":
	{
		"label": "Wire Printing",
		"description": "Print only the outside surface with a sparse webbed structure, printing 'in thin air'. This is realized by horizontally printing the contours of the model at given Z intervals which are connected via upward and diagonally downward lines.",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_height":
	{
		"label": "WP Connection Height",
		"description": "The height of the upward and diagonally downward lines between two horizontal parts. This determines the overall density of the net structure. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "3",
		"value": "eval(contex.value(\"machine_nozzle_head_distance\"))",
		"minimum_value": "0.001",
		"maximum_value_warning": "20",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_roof_inset":
	{
		"label": "WP Roof Inset Distance",
		"description": "The distance covered when making a connection from a roof outline inward. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "3",
		"minimum_value": "0",
		"minimum_value_warning": "eval(contex.value(\"machine_nozzle_size\"))",
		"maximum_value_warning": "20",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_height\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_printspeed":
	{
		"label": "WP Speed",
		"description": "Speed at which the nozzle moves when extruding material. Only applies to Wire Printing.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "5",
		"minimum_value": "0.05",
		"maximum_value": "Math.sqrt(Math.pow(eval(contex.value(\"machine_max_feedrate_x\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_y\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_z\")),2))",
		"maximum_value_warning": "50",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_printspeed_bottom":
	{
		"label": "WP Bottom Printing Speed",
		"description": "Speed of printing the first layer, which is the only layer touching the build platform. Only applies to Wire Printing.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "5",
		"minimum_value": "0.05",
		"maximum_value": "Math.sqrt(Math.pow(eval(contex.value(\"machine_max_feedrate_x\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_y\")),2))",
		"maximum_value_warning": "50",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_printspeed_flat\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_printspeed_up":
	{
		"label": "WP Upward Printing Speed",
		"description": "Speed of printing a line upward 'in thin air'. Only applies to Wire Printing.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "5",
		"minimum_value": "0.05",
		"maximum_value": "Math.sqrt(Math.pow(eval(contex.value(\"machine_max_feedrate_x\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_y\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_z\")),2))",
		"maximum_value_warning": "50",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_printspeed\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_printspeed_down":
	{
		"label": "WP Downward Printing Speed",
		"description": "Speed of printing a line diagonally downward. Only applies to Wire Printing.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "5",
		"minimum_value": "0.05",
		"maximum_value": "Math.sqrt(Math.pow(eval(contex.value(\"machine_max_feedrate_x\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_y\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_z\")),2))",
		"maximum_value_warning": "50",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_printspeed\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_printspeed_flat":
	{
		"label": "WP Horizontal Printing Speed",
		"description": "Speed of printing the horizontal contours of the model. Only applies to Wire Printing.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "5",
		"minimum_value": "0.05",
		"maximum_value": "Math.sqrt(Math.pow(eval(contex.value(\"machine_max_feedrate_x\")),2) + Math.pow(eval(contex.value(\"machine_max_feedrate_y\")),2))",
		"maximum_value_warning": "100",
		"value": "eval(contex.value(\"wireframe_printspeed\"))",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_flow":
	{
		"label": "WP Flow",
		"description": "Flow compensation: the amount of material extruded is multiplied by this value. Only applies to Wire Printing.",
		"unit": "%",
		"default_value": "100",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"type": "float",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_flow_connection":
	{
		"label": "WP Connection Flow",
		"description": "Flow compensation when going up or down. Only applies to Wire Printing.",
		"unit": "%",
		"default_value": "100",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"type": "float",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_flow\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_flow_flat":
	{
		"label": "WP Flat Flow",
		"description": "Flow compensation when printing flat lines. Only applies to Wire Printing.",
		"unit": "%",
		"default_value": "100",
		"minimum_value": "0",
		"maximum_value_warning": "100",
		"type": "float",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"value": "eval(contex.value(\"wireframe_flow\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_top_delay":
	{
		"label": "WP Top Delay",
		"description": "Delay time after an upward move, so that the upward line can harden. Only applies to Wire Printing.",
		"unit": "s",
		"type": "float",
		"default_value": "0",
		"minimum_value": "0",
		"maximum_value_warning": "1",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_bottom_delay":
	{
		"label": "WP Bottom Delay",
		"description": "Delay time after a downward move. Only applies to Wire Printing.",
		"unit": "s",
		"type": "float",
		"default_value": "0",
		"minimum_value": "0",
		"maximum_value_warning": "1",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_flat_delay":
	{
		"label": "WP Flat Delay",
		"description": "Delay time between two horizontal segments. Introducing such a delay can cause better adhesion to previous layers at the connection points, while too long delays cause sagging. Only applies to Wire Printing.",
		"unit": "s",
		"type": "float",
		"default_value": "0.1",
		"minimum_value": "0",
		"maximum_value_warning": "0.5",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_up_half_speed":
	{
		"label": "WP Ease Upward",
		"description": "Distance of an upward move which is extruded with half speed.This can cause better adhesion to previous layers, while not heating the material in those layers too much. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.3",
		"minimum_value": "0",
		"maximum_value_warning": "5.0",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_top_jump":
	{
		"label": "WP Knot Size",
		"description": "Creates a small knot at the top of an upward line, so that the consecutive horizontal layer has a better chance to connect to it. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.6",
		"minimum_value": "0",
		"maximum_value_warning": "2.0",
		"enabled": "eval(contex.value(\"wireframe_enabled\")) && getEnumValue(\"wireframe_strategy\") == 'knot'",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_fall_down":
	{
		"label": "WP Fall Down",
		"description": "Distance with which the material falls down after an upward extrusion. This distance is compensated for. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.5",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"wireframe_height\"))",
		"enabled": "eval(contex.value(\"wireframe_enabled\")) && getEnumValue(\"wireframe_strategy\") == 'compensate'",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_drag_along":
	{
		"label": "WP Drag Along",
		"description": "Distance with which the material of an upward extrusion is dragged along with the diagonally downward extrusion. This distance is compensated for. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.6",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"wireframe_height\"))",
		"enabled": "eval(contex.value(\"wireframe_enabled\")) && getEnumValue(\"wireframe_strategy\") == 'compensate'",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_strategy":
	{
		"label": "WP Strategy",
		"description": "Strategy for making sure two consecutive layers connect at each connection point. Retraction lets the upward lines harden in the right position, but may cause filament grinding. A knot can be made at the end of an upward line to heighten the chance of connecting to it and to let the line cool; however, it may require slow printing speeds. Another strategy is to compensate for the sagging of the top of an upward line; however, the lines won't always fall down as predicted.",
		"type": "enum",
		"options":
		{
			"compensate": "Compensate",
			"knot": "Knot",
			"retract": "Retract"
		},
		"default_value": "compensate",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_straight_before_down":
	{
		"label": "WP Straighten Downward Lines",
		"description": "Percentage of a diagonally downward line which is covered by a horizontal line piece. This can prevent sagging of the top most point of upward lines. Only applies to Wire Printing.",
		"type": "float",
		"unit": "%",
		"default_value": "20",
		"minimum_value": "0",
		"maximum_value": "100",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_roof_fall_down":
	{
		"label": "WP Roof Fall Down",
		"description": "The distance which horizontal roof lines printed 'in thin air' fall down when being printed. This distance is compensated for. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "2",
		"minimum_value_warning": "0",
		"maximum_value_warning": "eval(contex.value(\"wireframe_roof_inset\"))",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_roof_drag_along":
	{
		"label": "WP Roof Drag Along",
		"description": "The distance of the end piece of an inward line which gets dragged along when going back to the outer outline of the roof. This distance is compensated for. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "0.8",
		"minimum_value": "0",
		"maximum_value_warning": "10",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_roof_outer_delay":
	{
		"label": "WP Roof Outer Delay",
		"description": "Time spent at the outer perimeters of hole which is to become a roof. Longer times can ensure a better connection. Only applies to Wire Printing.",
		"type": "float",
		"unit": "s",
		"default_value": "0.2",
		"minimum_value": "0",
		"maximum_value_warning": "2.0",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wireframe_nozzle_clearance":
	{
		"label": "WP Nozzle Clearance",
		"description": "Distance between the nozzle and horizontally downward lines. Larger clearance results in diagonally downward lines with a less steep angle, which in turn results in less upward connections with the next layer. Only applies to Wire Printing.",
		"type": "float",
		"unit": "mm",
		"default_value": "1",
		"minimum_value_warning": "0",
		"maximum_value_warning": "10.0",
		"enabled": "eval(contex.value(\"wireframe_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"adaptive_layer_height_enabled":
	{
		"label": "Use Adaptive Layers",
		"description": "Adaptive layers computes the layer heights depending on the shape of the model.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"adaptive_layer_height_variation":
	{
		"label": "Adaptive Layers Maximum Variation",
		"description": "The maximum allowed height different from the base layer height.",
		"type": "float",
		"enabled": "eval(contex.value(\"adaptive_layer_height_enabled\"))",
		"unit": "mm",
		"default_value": "0.04",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"adaptive_layer_height_variation_step":
	{
		"label": "Adaptive Layers Variation Step Size",
		"description": "The difference in height of the next layer height compared to the previous one.",
		"type": "float",
		"enabled": "eval(contex.value(\"adaptive_layer_height_enabled\"))",
		"default_value": "0.04",
		"unit": "mm",
		"settable_per_mesh": false,
		"minimum_value": "0.001",
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"adaptive_layer_height_threshold":
	{
		"label": "Adaptive Layers Topography Size",
		"description": "Target horizontal distance between two adjacent layers. Reducing this setting causes thinner layers to be used to bring the edges of the layers closer together.",
		"type": "float",
		"enabled": "eval(contex.value(\"adaptive_layer_height_enabled\"))",
		"default_value": "0.2",
		"unit": "mm",
		"settable_per_mesh": false,
		"settable_per_extruder": false,
		"settable_per_meshgroup": false
	},
	"wall_overhang_angle":
	{
		"label": "Overhanging Wall Angle",
		"description": "Walls that overhang more than this angle will be printed using overhanging wall settings. When the value is 90, no walls will be treated as overhanging. Overhang that gets supported by support will not be treated as overhang either.",
		"unit": "°",
		"type": "float",
		"minimum_value": "0",
		"minimum_value_warning": "2",
		"maximum_value": "90",
		"default_value": "90",
		"enabled": "!(eval(contex.value(\"set_wall_overhang_grading\")))",
		"settable_per_mesh": true
	},
	"wall_overhang_speed_factor":
	{
		"label": "Overhanging Wall Speed",
		"description": "Overhanging walls will be printed at this percentage of their normal print speed.",
		"unit": "%",
		"type": "float",
		"default_value": "100",
		"minimum_value": "0.001",
		"minimum_value_warning": "5",
		"enabled": "!(eval(contex.value(\"set_wall_overhang_grading\")))",
		"settable_per_mesh": true
	},
	"wall_hole_speed_factor":
	{
		"label": "Hole Wall Speed",
		"description": "Hole walls will be printed at this percentage of their normal print speed.",
		"unit": "%",
		"type": "float",
		"default_value": "100",
		"minimum_value": "0.001",
		"minimum_value_warning": "25",
		"settable_per_mesh": true
	},
	"clean_between_layers":
	{
		"label": "Wipe Nozzle Between Layers",
		"description": "Whether to include nozzle wipe G-Code between layers (maximum 1 per layer). Enabling this setting could influence behavior of retract at layer change. Please use Wipe Retraction settings to control retraction at layers where the wipe script will be working.",
		"default_value": "false",
		"type": "bool",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"max_extrusion_before_wipe":
	{
		"label": "Material Volume Between Wipes",
		"description": "Maximum material that can be extruded before another nozzle wipe is initiated. If this value is less than the volume of material required in a layer, the setting has no effect in this layer, i.e. it is limited to one wipe per layer.",
		"default_value": "10",
		"type": "float",
		"unit": "mm³",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_retraction_enable":
	{
		"label": "Wipe Retraction Enable",
		"description": "Retract the filament when the nozzle is moving over a non-printed area.",
		"type": "bool",
		"default_value": "true",
		"value": "eval(contex.value(\"retraction_enable\"))",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_retraction_amount":
	{
		"label": "Wipe Retraction Distance",
		"description": "Amount to retract the filament so it does not ooze during the wipe sequence.",
		"unit": "mm",
		"type": "float",
		"default_value": "5",
		"value": "eval(contex.value(\"retraction_amount\"))",
		"minimum_value_warning": "-0.0001",
		"maximum_value_warning": "10.0",
		"enabled": "eval(contex.value(\"wipe_retraction_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_retraction_extra_prime_amount":
	{
		"label": "Wipe Retraction Extra Prime Amount",
		"description": "Some material can ooze away during a wipe travel moves, which can be compensated for here.",
		"unit": "mm³",
		"type": "float",
		"default_value": "0",
		"value": "eval(contex.value(\"retraction_extra_prime_amount\"))",
		"minimum_value_warning": "-0.0001",
		"maximum_value_warning": "10.0",
		"enabled": "eval(contex.value(\"wipe_retraction_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"wipe_retraction_speed":
	{
		"label": "Wipe Retraction Speed",
		"description": "The speed at which the filament is retracted and primed during a wipe retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "45",
		"value": "eval(contex.value(\"retraction_speed\"))",
		"minimum_value": "0",
		"minimum_value_warning": "1",
		"maximum_value": "machine_max_feedrate_e",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"wipe_retraction_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"wipe_retraction_retract_speed":
	{
		"label": "Wipe Retraction Retract Speed",
		"description": "The speed at which the filament is retracted during a wipe retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "45",
		"minimum_value": "0",
		"maximum_value": "machine_max_feedrate_e",
		"minimum_value_warning": "1",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"wipe_retraction_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"value": "eval(contex.value(\"wipe_retraction_speed\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"wipe_retraction_prime_speed":
	{
		"label": "Wipe Retraction Prime Speed",
		"description": "The speed at which the filament is primed during a wipe retraction move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "45",
		"minimum_value": "0",
		"maximum_value": "machine_max_feedrate_e",
		"minimum_value_warning": "1",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"wipe_retraction_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"value": "eval(contex.value(\"wipe_retraction_speed\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"wipe_pause":
	{
		"label": "Wipe Pause",
		"description": "Pause after the unretract.",
		"unit": "s",
		"type": "float",
		"default_value": "0",
		"minimum_value": "0",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_hop_enable":
	{
		"label": "Wipe Z Hop",
		"description": "When wiping, the build plate is lowered to create clearance between the nozzle and the print. It prevents the nozzle from hitting the print during travel moves, reducing the chance to knock the print from the build plate.",
		"type": "bool",
		"default_value": "true",
		"value": "eval(contex.value(\"retraction_hop_enabled\"))",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_hop_amount":
	{
		"label": "Wipe Z Hop Height",
		"description": "The height difference when performing a Z Hop.",
		"unit": "mm",
		"type": "float",
		"default_value": "1",
		"value": "eval(contex.value(\"retraction_hop\"))",
		"enabled": "eval(contex.value(\"wipe_hop_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_hop_speed":
	{
		"label": "Wipe Hop Speed",
		"description": "Speed to move the z-axis during the hop.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "10",
		"value": "eval(contex.value(\"speed_z_hop\"))",
		"minimum_value": "0",
		"minimum_value_warning": "1",
		"enabled": "eval(contex.value(\"wipe_hop_enable\")) && eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_brush_pos_x":
	{
		"label": "Wipe Brush X Position",
		"description": "X location where wipe script will start.",
		"type": "float",
		"unit": "mm",
		"default_value": "100",
		"minimum_value_warning": "0",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_repeat_count":
	{
		"label": "Wipe Repeat Count",
		"description": "Number of times to move the nozzle across the brush.",
		"type": "int",
		"minimum_value": "0",
		"default_value": "5",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"wipe_move_distance":
	{
		"label": "Wipe Move Distance",
		"description": "The distance to move the head back and forth across the brush.",
		"unit": "mm",
		"type": "float",
		"default_value": "20",
		"enabled": "eval(contex.value(\"clean_between_layers\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"settable_per_meshgroup": false
	},
	"material_alternate_walls":
	{
		"label": "Alternate Wall Directions",
		"description": "Alternate wall directions every other layer and inset. Useful for materials that can build up stress, like for metal printing.",
		"type": "bool",
		"default_value": "false",
		"enabled": true,
		"settable_per_mesh": true,
		"settable_per_extruder": true
	},
	"raft_remove_inside_corners":
	{
		"label": "Remove Raft Inside Corners",
		"description": "Remove inside corners from the raft, causing the raft to become convex.",
		"type": "bool",
		"default_value": "false",
		"resolve": "any(extruderValues('raft_remove_inside_corners'))",
		"enabled": "resolveOrValue('adhesion_type') == 'raft'",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"raft_base_wall_count":
	{
		"label": "Raft Base Wall Count",
		"description": "The number of contours to print around the linear pattern in the base layer of the raft.",
		"type": "int",
		"default_value": "1",
		"enabled": "resolveOrValue('adhesion_type') == 'raft'",
		"resolve": "max(extruderValues('raft_base_wall_count'))",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"special_slope_slice_angle": 
	{
		"label": "Angle of Slope Slice",
		"description": "Angle of Slope Slice",
		"unit": "°",
		"type": "float",
		"default_value": "0",
		"minimum_value": "-90",
		"minimum_value_warning": "-90",
		"maximum_value_warning": "90",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"special_slope_slice_axis": 
	{
		"label": "Rotation Axis of Slope Slice",
		"description": "Rotation Axis of Slope Slice",
		"default_value": "Y",
		"type": "enum",
		"options":
		{
			"X": "X",
			"Y": "Y"
		},
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"klipper_time_estimate_enable": 
	{
		"label": "High-precision Estimate Time Enable",
		"description": "High-precision estimate time enable",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"mesh_order_user_specified": 
	{
		"label": "mesh order user specified",
		"description": "mesh order user specified",
		"type": "bool",
		"default_value": "false",
		"enabled": "false"
	},
	"mesh_order_user_specified_str":
	{	
		"label": "mesh order user specified str",
		"description": "mesh order user specified str",
		"type": "str",
		"default_value": "[0,1]",
		"enabled": "false"
	},
	"mesh_split_gap":
	{
		"label": "Mesh split gap",
		"description": "Mesh split gap",
		"unit": "mm",
		"type": "float",
		"default_value": "0.5",
		"enabled": "false"
	}
}