{
	"prime_tower_enable":
	{
		"label": "Enable Prime Tower",
		"description": "Print a tower next to the print which serves to prime the material after each nozzle switch.",
		"type": "bool",
		"enabled": "eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "false",
		"resolve": "(extruders_enabled_count > 1) and any(extruderValues('prime_tower_enable'))",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"prime_tower_type":
	{
		"label": "Prime Tower type",
		"description": "Prime Tower type",
		"type": "enum",
		"options":
		{
			"normal": "Normal",
			"single": "Single"
		},
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "single",
		"resolve": "(extruders_enabled_count > 1) and any(extruderValues('prime_tower_enable'))",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"prime_tower_size":
	{
		"label": "Prime Tower Size",
		"description": "The width of the prime tower.",
		"type": "float",
		"unit": "mm",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "20",
		"resolve": "max(extruderValues('prime_tower_size'))",
		"minimum_value": "0",
		"maximum_value": "Math.min(0.5 * eval(contex.value(\"machine_width\")), 0.5 * eval(contex.value(\"machine_depth\")))",
		"minimum_value_warning": "eval(contex.value(\"prime_tower_line_width\")) * 2",
		"maximum_value_warning": "20",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"prime_tower_min_volume":
	{
		"label": "Prime Tower Minimum Volume",
		"description": "The minimum volume for each layer of the prime tower in order to purge enough material.",
		"unit": "mm³",
		"type": "float",
		"default_value": "12",
		"minimum_value": "0",
		"maximum_value_warning": "Math.pow((eval(contex.value(\"prime_tower_size\")) * 0.5), 2) * 3.14159 * eval(contex.value(\"layer_height\"))",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"prime_tower_position_x":
	{
		"label": "Prime Tower X Position",
		"description": "The x coordinate of the position of the prime tower.",
		"type": "float",
		"unit": "mm",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "20",
		"maximum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"machine_width\")) / 2 : eval(contex.value(\"machine_width\"))-eval(contex.value(\"prime_tower_size\"))/2",
		"minimum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"prime_tower_size\")) - eval(contex.value(\"machine_width\")) / 2 : eval(contex.value(\"prime_tower_size\"))/2",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"prime_tower_position_y":
	{
		"label": "Prime Tower Y Position",
		"description": "The y coordinate of the position of the prime tower.",
		"type": "float",
		"unit": "mm",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "20",
		"maximum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"machine_depth\")) / 2 - eval(contex.value(\"prime_tower_size\")) : eval(contex.value(\"machine_depth\")) - eval(contex.value(\"prime_tower_size\"))/2",
		"minimum_value": "eval(contex.value(\"machine_center_is_zero\")) ? eval(contex.value(\"machine_depth\")) / -2 : eval(contex.value(\"prime_tower_size\"))/2",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"prime_tower_wipe_enabled":
	{
		"label": "Wipe Inactive Nozzle on Prime Tower",
		"description": "After printing the prime tower with one nozzle, wipe the oozed material from the other nozzle off on the prime tower.",
		"type": "bool",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"default_value": "true",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"prime_tower_brim_enable":
	{
		"label": "Prime Tower Brim",
		"description": "Prime-towers might need the extra adhesion afforded by a brim even if the model doesn't. Presently can't be used with the 'Raft' adhesion-type.",
		"type": "bool",
		"enabled": "eval(contex.value(\"prime_tower_enable\")) && (getEnumValue(\"adhesion_type\") != 'raft')",
		"resolve": "resolveOrValue('prime_tower_enable') and (resolveOrValue('adhesion_type') in ('none', 'skirt'))",
		"default_value": "false",
		"parameter_level": "2",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"ooze_shield_enabled":
	{
		"label": "Enable Ooze Shield",
		"description": "Enable exterior ooze shield. This will create a shell around the model which is likely to wipe a second nozzle if it's at the same height as the first nozzle.",
		"type": "bool",
		"resolve": "any(extruderValues('ooze_shield_enabled'))",
		"enabled": "eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"ooze_shield_angle":
	{
		"label": "Ooze Shield Angle",
		"description": "The maximum angle a part in the ooze shield will have. With 0 degrees being vertical, and 90 degrees being horizontal. A smaller angle leads to less failed ooze shields, but more material.",
		"type": "float",
		"unit": "°",
		"enabled": "eval(contex.value(\"ooze_shield_enabled\"))",
		"default_value": "60",
		"resolve": "min(extruderValues('ooze_shield_angle'))",
		"minimum_value": "0",
		"maximum_value": "90",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"ooze_shield_dist":
	{
		"label": "Ooze Shield Distance",
		"description": "Distance of the ooze shield from the print, in the X/Y directions.",
		"type": "float",
		"unit": "mm",
		"enabled": "eval(contex.value(\"ooze_shield_enabled\"))",
		"default_value": "2",
		"resolve": "max(extruderValues('ooze_shield_dist'))",
		"minimum_value": "0",
		"maximum_value_warning": "20",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"switch_extruder_retraction_amount":
	{
		"label": "Nozzle Switch Retraction Distance",
		"description": "The amount of retraction when switching extruders. Set to 0 for no retraction at all. This should generally be the same as the length of the heat zone.",
		"type": "float",
		"unit": "mm",
		"parameter_level": "1",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "5.0",
		"value": "eval(contex.value(\"machine_heat_zone_length\"))",
		"minimum_value_warning": "0",
		"maximum_value_warning": "100",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"switch_extruder_retraction_speeds":
	{
		"label": "Nozzle Switch Retraction Speed",
		"description": "The speed at which the filament is retracted. A higher retraction speed works better, but a too high retraction speed can lead to filament grinding.",
		"type": "float",
		"unit": "mm/s",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "20",
		"minimum_value": "0.1",
		"minimum_value_warning": "1",
		"maximum_value": "eval(contex.value(\"retraction_enable\")) ? eval(contex.value(\"machine_max_feedrate_e\")) : 99999999",
		"maximum_value_warning": "70",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"switch_extruder_retraction_speed":
	{
		"label": "Nozzle Switch Retract Speed",
		"description": "The speed at which the filament is retracted during a nozzle switch retract.",
		"type": "float",
		"unit": "mm/s",
		"parameter_level": "1",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "20",
		"value": "eval(contex.value(\"switch_extruder_retraction_speeds\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "1",
		"maximum_value": "eval(contex.value(\"retraction_enable\")) ? eval(contex.value(\"machine_max_feedrate_e\")) : 99999999",
		"maximum_value_warning": "70",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"switch_extruder_prime_speed":
	{
		"label": "Nozzle Switch Prime Speed",
		"description": "The speed at which the filament is pushed back after a nozzle switch retraction.",
		"type": "float",
		"unit": "mm/s",
		"parameter_level": "1",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"default_value": "20",
		"value": "eval(contex.value(\"switch_extruder_retraction_speeds\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "1",
		"maximum_value": "eval(contex.value(\"retraction_enable\")) ? eval(contex.value(\"machine_max_feedrate_e\")) : 99999999",
		"maximum_value_warning": "70",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"switch_extruder_extra_prime_amount":
	{
		"label": "Nozzle Switch Extra Prime Amount",
		"description": "Extra material to prime after nozzle switching.",
		"type": "float",
		"unit": "mm³",
		"parameter_level": "1",
		"default_value": "0",
		"minimum_value_warning": "0",
		"maximum_value_warning": "100",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"extruders_enabled_count\")) > 1",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	}
}