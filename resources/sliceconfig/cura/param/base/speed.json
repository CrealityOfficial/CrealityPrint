{
	"speed_print":
	{
		"label": "Print Speed",
		"description": "The speed at which printing happens.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value_warning": "800",
		"maximum_value": "800",
		"parameter_level": "1",
		"default_value": "50",
		"settable_per_mesh": true
	},
	"speed_infill":
	{
		"label": "Infill Speed",
		"description": "The speed at which infill is printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"default_value": "50",
		"value": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"infill_sparse_density\")) > 0",
		"limit_to_extruder": "infill_extruder_nr",
		"settable_per_mesh": true
	},
	"speed_wall":
	{
		"label": "Wall Speed",
		"description": "The speed at which the walls are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "-2",
		"default_value": "25",
		"value": "eval(contex.value(\"speed_print\")) / 2",
		"settable_per_mesh": true
	},
	"speed_wall_0":
	{
		"label": "Outer Wall Speed",
		"description": "The speed at which the outermost walls are printed. Printing the outer wall at a lower speed improves the final skin quality. However, having a large difference between the inner wall speed and the outer wall speed will affect quality in a negative way.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"default_value": "25",
		"value": "eval(contex.value(\"speed_print\"))/2",
		"limit_to_extruder": "wall_0_extruder_nr",
		"settable_per_mesh": true
	},
	"speed_wall_x":
	{
		"label": "Inner Wall Speed",
		"description": "The speed at which all inner walls are printed. Printing the inner wall faster than the outer wall will reduce printing time. It works well to set this in between the outer wall speed and the infill speed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"default_value": "25",
		"value": "eval(contex.value(\"speed_print\"))/2",
		"limit_to_extruder": "wall_x_extruder_nr",
		"settable_per_mesh": true
	},
	"speed_roofing":
	{
		"label": "Top Surface Skin Speed",
		"description": "The speed at which top surface skin layers are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"default_value": "25",
		"value": "eval(contex.value(\"speed_topbottom\"))",
		"limit_to_extruder": "roofing_extruder_nr",
		"settable_per_mesh": true,
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"roofing_layer_count\")) > 0 && eval(contex.value(\"top_layers\")) > 0"
	},
	"speed_topbottom":
	{
		"label": "Top/Bottom Speed",
		"description": "The speed at which top/bottom layers are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"default_value": "30",
		"value": "eval(contex.value(\"speed_print\")) / 2",
		"limit_to_extruder": "top_bottom_extruder_nr",
		"enabled": "eval(contex.value(\"top_layers\")) > 0 || eval(contex.value(\"bottom_layers\")) > 0",
		"settable_per_mesh": true
	},
	"speed_support":
	{
		"label": "Support Speed",
		"description": "The speed at which the support structure is printed. Printing support at higher speeds can greatly reduce printing time. The surface quality of the support structure is not important since it is removed after printing.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"default_value": "60",
		"value": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\"))",
		"settable_per_mesh": false,
		"limit_to_extruder": "support_extruder_nr",
		"settable_per_extruder": true
	},
	"speed_support_infill":
	{
		"label": "Support Infill Speed",
		"description": "The speed at which the infill of support is printed. Printing the infill at lower speeds improves stability.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "60",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"value": "eval(contex.value(\"speed_support\"))",
		"enabled": "eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\"))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_support_interface":
	{
		"label": "Support Interface Speed",
		"description": "The speed at which the roofs and floors of support are printed. Printing them at lower speeds can improve overhang quality.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "25",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"enabled": "eval(contex.value(\"support_interface_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_interface_extruder_nr",
		"value": "eval(contex.value(\"speed_support\")) / 1.5",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_support_roof":
	{
		"label": "Support Roof Speed",
		"description": "The speed at which the roofs of support are printed. Printing them at lower speeds can improve overhang quality.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "40",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"enabled": "eval(contex.value(\"support_roof_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_roof_extruder_nr",
		"value": "eval(contex.value(\"speed_support_interface\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_support_bottom":
	{
		"label": "Support Floor Speed",
		"description": "The speed at which the floor of support is printed. Printing it at lower speed can improve adhesion of support on top of your model.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "40",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"enabled": "eval(contex.value(\"support_bottom_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_bottom_extruder_nr",
		"value": "eval(contex.value(\"speed_support_interface\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},	
	"speed_prime_tower":
	{
		"label": "Prime Tower Speed",
		"description": "The speed at which the prime tower is printed. Printing the prime tower slower can make it more stable when the adhesion between the different filaments is suboptimal.",
		"type": "float",
		"unit": "mm/s",
		"enabled": "eval(contex.value(\"prime_tower_enable\"))",
		"parameter_level": "2",
		"default_value": "60",
		"value": "eval(contex.value(\"speed_print\"))",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_travel":
	{
		"label": "Travel Speed",
		"description": "The speed at which travel moves are made.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "100",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "1",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_layer_0":
	{
		"label": "Initial Layer Speed",
		"description": "The speed for the initial layer. A lower value is advised to improve adhesion to the build plate.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "25",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "-1",
		"settable_per_mesh": true
	},
	"speed_print_layer_0":
	{
		"label": "Initial Layer Print Speed",
		"description": "The speed of printing for the initial layer. A lower value is advised to improve adhesion to the build plate.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "15",
		"value": "eval(contex.value(\"speed_layer_0\"))",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"settable_per_mesh": true
	},
	"speed_travel_layer_0":
	{
		"label": "Initial Layer Travel Speed",
		"description": "The speed of travel moves in the initial layer. A lower value is advised to prevent pulling previously printed parts away from the build plate. The value of this setting can automatically be calculated from the ratio between the Travel Speed and the Print Speed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "25",
		"value": "eval(contex.value(\"speed_layer_0\")) * eval(contex.value(\"speed_travel\")) / eval(contex.value(\"speed_print\"))",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "2",
		"settable_per_extruder": true,
		"settable_per_mesh": false
	},
	"skirt_brim_speed":
	{
		"label": "Skirt/Brim Speed",
		"description": "The speed at which the skirt and brim are printed. Normally this is done at the initial layer speed, but sometimes you might want to print the skirt or brim at a different speed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "25",
		"minimum_value": "0.1",
		"maximum_value": "2000",
		"maximum_value_warning": "800",
		"parameter_level": "1",
		"value": "eval(contex.value(\"speed_layer_0\"))",
		"enabled": "getEnumValue(\"adhesion_type\") == 'skirt' || getEnumValue(\"adhesion_type\") == 'autobrim'|| getEnumValue(\"adhesion_type\") == 'brim' || eval(contex.value(\"draft_shield_enabled\")) || eval(contex.value(\"ooze_shield_enabled\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"limit_to_extruder": "adhesion_extruder_nr"
	},
	"speed_z_hop":
	{
		"label": "Z Hop Speed",
		"description": "The speed at which the vertical Z movement is made for Z Hops. This is typically lower than the print speed since the build plate or machine's gantry is harder to move.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "10",
		"minimum_value": "0",
		"maximum_value": "500",
		"enabled": "eval(contex.value(\"retraction_enable\")) && eval(contex.value(\"retraction_hop_enabled\"))",
		"parameter_level": "3",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_slowdown_layers":
	{
		"label": "Number of Slower Layers",
		"description": "The first few layers are printed slower than the rest of the model, to get better adhesion to the build plate and improve the overall success rate of prints. The speed is gradually increased over these layers.",
		"type": "int",
		"default_value": "2",
		"resolve": "round(sum(extruderValues('speed_slowdown_layers')) / len(extruderValues('speed_slowdown_layers')))",
		"minimum_value": "0",
		"maximum_value_warning": "3.2 / eval(contex.value(\"layer_height\"))",
		"settable_per_mesh": false,
		"parameter_level": "3",
		"settable_per_extruder": false
	},
	"power_slowdown_layers":
	{
		"label": "Number of Tower Slower Layers",
		"description": "Number of Tower Slower Layers",
		"type": "int",
		"default_value": "12",
		"resolve": "round(sum(extruderValues('speed_slowdown_layers')) / len(extruderValues('speed_slowdown_layers')))",
		"minimum_value": "0",
		"maximum_value_warning": "3.2 / eval(contex.value(\"layer_height\"))",
		"settable_per_mesh": false,
		"parameter_level": "3",
		"settable_per_extruder": false
	},
	"speed_equalize_flow_width_factor":
	{
		"label": "Flow Equalization Ratio",
		"description": "Extrusion width based correction factor on the speed. At 0% the movement speed is kept constant at the Print Speed. At 100% the movement speed is adjusted so that the flow (in mm³/s) is kept constant, i.e. lines half the normal Line Width are printed twice as fast and lines twice as wide are printed half as fast. A value larger than 100% can help to compensate for the higher pressure required to extrude wide lines.",
		"type": "float",
		"unit": "%",
		"default_value": "100.0",
		"minimum_value": "0.0",
		"maximum_value_warning": "200.0",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"speed_min_travel_speed_length":
	{
		"label": "Min Path Length at Travel Speed",
		"description": "When the length of the travel path between two print paths is less than this value, the travel path will run at the Print Speed.",
		"type": "float",
		"unit": "mm",
		"default_value": "1.0",
		"parameter_level": "1",
		"minimum_value": "0.0",
		"settable_per_mesh": true
	},
	"set_wall_overhang_grading": 
	{
		"label": "Set Overhanging Wall Speed Grading",
		"description": "Whether To Set Graded Treatment Of Overhanging Wall Speed.",
		"type": "bool",
		"default_value": "true",
		"parameter_level": "1",
		"settable_per_mesh": true
	},
	"wall_overhang_speed_1":
	{
		"label": "(10%~25%]",
		"unit": "mm/s",
		"type": "float",
		"default_value": "0",
		"enabled": "eval(contex.value(\"set_wall_overhang_grading\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"wall_overhang_speed_2":
	{
		"label": "(25%~50%]",
		"unit": "mm/s",
		"type": "float",
		"default_value": "50",
		"value": "eval(contex.value(\"speed_wall_0\")) < 50 ? eval(contex.value(\"speed_wall_0\")) : 50",
		"enabled": "eval(contex.value(\"set_wall_overhang_grading\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"wall_overhang_speed_3":
	{
		"label": "(50%~75%]",
		"unit": "mm/s",
		"type": "float",
		"default_value": "35",
		"value": "eval(contex.value(\"speed_wall_0\")) < 35 ? eval(contex.value(\"speed_wall_0\")) : 35",
		"enabled": "eval(contex.value(\"set_wall_overhang_grading\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"wall_overhang_speed_4":
	{
		"label": "(75%~100%]",
		"unit": "mm/s",
		"type": "float",
		"default_value": "10",
		"value": "eval(contex.value(\"speed_wall_0\")) < 10 ? eval(contex.value(\"speed_wall_0\")) : 10",
		"enabled": "eval(contex.value(\"set_wall_overhang_grading\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_enabled":
	{
		"label": "Enable Acceleration Control",
		"description": "Enables adjusting the print head acceleration. Increasing the accelerations can reduce printing time at the cost of print quality.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "1",
		"resolve": "any(extruderValues('acceleration_enabled'))",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"acceleration_travel_enabled":
	{
		"label": "Enable Travel Acceleration",
		"description": "Use a separate acceleration rate for travel moves. If disabled, travel moves will use the acceleration value of the printed line at their destination.",
		"type": "bool",
		"default_value": "true",
		"resolve": "any(extruderValues('acceleration_travel_enabled'))",
		"enabled": "acceleration_enabled",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"acceleration_print":
	{
		"label": "Print Acceleration",
		"description": "The acceleration with which printing happens.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "500",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"settable_per_mesh": true,
		"parameter_level": "-2"
	},
	"acceleration_infill":
	{
		"label": "Infill Acceleration",
		"description": "The acceleration with which infill is printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"infill_sparse_density\")) > 0",
		"limit_to_extruder": "infill_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_wall":
	{
		"label": "Wall Acceleration",
		"description": "The acceleration with which the walls are printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "-2",
		"settable_per_mesh": true
	},
	"acceleration_wall_0":
	{
		"label": "Outer Wall Acceleration",
		"description": "The acceleration with which the outermost walls are printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_wall\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_wall_x":
	{
		"label": "Inner Wall Acceleration",
		"description": "The acceleration with which all inner walls are printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_wall\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"limit_to_extruder": "wall_x_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_roofing":
	{
		"label": "Top Surface Skin Acceleration",
		"description": "The acceleration with which top surface skin layers are printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_topbottom\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"roofing_layer_count\")) > 0 && eval(contex.value(\"top_layers\")) > 0",
		"limit_to_extruder": "roofing_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_topbottom":
	{
		"label": "Top/Bottom Acceleration",
		"description": "The acceleration with which top/bottom layers are printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"limit_to_extruder": "top_bottom_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_support":
	{
		"label": "Support Acceleration",
		"description": "The acceleration with which the support structure is printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"settable_per_mesh": false,
		"limit_to_extruder": "support_extruder_nr",
		"parameter_level": "4",
		"settable_per_extruder": true
	},
	"acceleration_support_infill":
	{
		"label": "Support Infill Acceleration",
		"description": "The acceleration with which the infill of support is printed.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_support\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": false,
		"parameter_level": "4",
		"settable_per_extruder": true
	},
	"acceleration_support_interface":
	{
		"label": "Support Interface Acceleration",
		"description": "The acceleration with which the roofs and floors of support are printed. Printing them at lower acceleration can improve overhang quality.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_support\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"support_interface_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_interface_extruder_nr",
		"settable_per_mesh": false,
		"parameter_level": "4",
		"settable_per_extruder": true
	},
	"acceleration_support_roof":
	{
		"label": "Support Roof Acceleration",
		"description": "The acceleration with which the roofs of support are printed. Printing them at lower acceleration can improve overhang quality.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_support_interface\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"support_roof_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_roof_extruder_nr",
		"settable_per_mesh": false,
		"parameter_level": "4",
		"settable_per_extruder": true
	},
	"acceleration_support_bottom":
	{
		"label": "Support Floor Acceleration",
		"description": "The acceleration with which the floors of support are printed. Printing them at lower acceleration can improve adhesion of support on top of your model.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_support_interface\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"support_bottom_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_bottom_extruder_nr",
		"settable_per_mesh": false,
		"parameter_level": "4",
		"settable_per_extruder": true
	},
	"acceleration_prime_tower":
	{
		"label": "Prime Tower Acceleration",
		"description": "The acceleration with which the prime tower is printed.",
		"unit": "mm/s²",
		"type": "float",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"prime_tower_enable\")) && eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": false
	},
	"acceleration_travel":
	{
		"label": "Travel Acceleration",
		"description": "The acceleration with which travel moves are made.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "500",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "50000",
		"value": "eval(contex.value(\"acceleration_print\"))",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": false
	},
	"acceleration_layer_0":
	{
		"label": "Initial Layer Acceleration",
		"description": "The acceleration for the initial layer.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "500",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "20000",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "-2",
		"settable_per_mesh": true
	},
	"acceleration_print_layer_0":
	{
		"label": "Initial Layer Print Acceleration",
		"description": "The acceleration during the printing of the initial layer.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_layer_0\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "20000",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"acceleration_travel_layer_0":
	{
		"label": "Initial Layer Travel Acceleration",
		"description": "The acceleration for travel moves in the initial layer.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_layer_0\")) * eval(contex.value(\"acceleration_travel\")) / eval(contex.value(\"acceleration_print\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "20000",
		"enabled": "eval(contex.value(\"acceleration_enabled\"))",
		"parameter_level": "4",
		"settable_per_extruder": true,
		"settable_per_mesh": false
	},
	"acceleration_skirt_brim":
	{
		"label": "Skirt/Brim Acceleration",
		"description": "The acceleration with which the skirt and brim are printed. Normally this is done with the initial layer acceleration, but sometimes you might want to print the skirt or brim at a different acceleration.",
		"unit": "mm/s²",
		"type": "float",
		"default_value": "3000",
		"value": "eval(contex.value(\"acceleration_layer_0\"))",
		"minimum_value": "0.1",
		"minimum_value_warning": "100",
		"maximum_value_warning": "20000",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && (getEnumValue(\"adhesion_type\") == 'skirt' || getEnumValue(\"adhesion_type\") == 'brim' || eval(contex.value(\"draft_shield_enabled\")) || eval(contex.value(\"ooze_shield_enabled\")))",
		"settable_per_mesh": false,
		"limit_to_extruder": "adhesion_extruder_nr"
	},
	"acceleration_breaking_enable":
	{
		"label": "Enable Acceleration to decelerate",
		"description": "Enable acceleration to decelerate.",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": true,
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && (getEnumValue(\"machine_gcode_flavor\") == 'Klipper' || getEnumValue(\"machine_gcode_flavor\") == '4408')"
	},
	"acceleration_breaking":
	{
		"label": "Acceleration to decelerate",
		"description": "Acceleration to decelerate.",
		"unit": "%",
		"type": "float",
		"default_value": "50",
		"minimum_value": "0",
		"maximum_value": "100",
		"enabled": "eval(contex.value(\"acceleration_enabled\")) && eval(contex.value(\"acceleration_breaking_enable\"))",
		"parameter_level": "4",
		"settable_per_mesh": false
	},
	"jerk_enabled":
	{
		"label": "Enable Jerk Control",
		"description": "Enables adjusting the jerk of print head when the velocity in the X or Y axis changes. Increasing the jerk can reduce printing time at the cost of print quality.",
		"type": "bool",
		"default_value": "false",
		"parameter_level": "1",
		"resolve": "any(extruderValues('jerk_enabled'))",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"jerk_travel_enabled":
	{
		"label": "Enable Travel Jerk",
		"description": "Use a separate jerk rate for travel moves. If disabled, travel moves will use the jerk value of the printed line at their destination.",
		"type": "bool",
		"default_value": "true",
		"resolve": "any(extruderValues('jerk_travel_enabled'))",
		"enabled": "jerk_enabled",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"jerk_print":
	{
		"label": "Print Jerk",
		"description": "The maximum instantaneous velocity change of the print head.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "8",
		"parameter_level": "2",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"settable_per_mesh": true
	},
	"jerk_infill":
	{
		"label": "Infill Jerk",
		"description": "The maximum instantaneous velocity change with which infill is printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && eval(contex.value(\"infill_sparse_density\")) > 0",
		"limit_to_extruder": "infill_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_wall":
	{
		"label": "Wall Jerk",
		"description": "The maximum instantaneous velocity change with which the walls are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"parameter_level": "2",
		"settable_per_mesh": true
	},
	"jerk_wall_0":
	{
		"label": "Outer Wall Jerk",
		"description": "The maximum instantaneous velocity change with which the outermost walls are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_wall\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"limit_to_extruder": "wall_0_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_wall_x":
	{
		"label": "Inner Wall Jerk",
		"description": "The maximum instantaneous velocity change with which all inner walls are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_wall\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"limit_to_extruder": "wall_x_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_roofing":
	{
		"label": "Top Surface Skin Jerk",
		"description": "The maximum instantaneous velocity change with which top surface skin layers are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_topbottom\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && eval(contex.value(\"roofing_layer_count\")) > 0 && eval(contex.value(\"top_layers\")) > 0",
		"limit_to_extruder": "roofing_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_topbottom":
	{
		"label": "Top/Bottom Jerk",
		"description": "The maximum instantaneous velocity change with which top/bottom layers are printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_print\"))",
		"enabled": "(eval(contex.value(\"top_layers\")) > 0 || eval(contex.value(\"bottom_layers\")) > 0) && eval(contex.value(\"jerk_enabled\"))",
		"limit_to_extruder": "top_bottom_extruder_nr",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_support":
	{
		"label": "Support Jerk",
		"description": "The maximum instantaneous velocity change with which the support structure is printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"settable_per_mesh": false,
		"settable_per_extruder": true,
		"limit_to_extruder": "support_extruder_nr"
	},
	"jerk_support_infill":
	{
		"label": "Support Infill Jerk",
		"description": "The maximum instantaneous velocity change with which the infill of support is printed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_support\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_infill_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"jerk_support_interface":
	{
		"label": "Support Interface Jerk",
		"description": "The maximum instantaneous velocity change with which the roofs and floors of support are printed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_support\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && eval(contex.value(\"support_interface_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_interface_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"jerk_support_roof":
	{
		"label": "Support Roof Jerk",
		"description": "The maximum instantaneous velocity change with which the roofs of support are printed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_support_interface\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && eval(contex.value(\"support_roof_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_roof_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"jerk_support_bottom":
	{
		"label": "Support Floor Jerk",
		"description": "The maximum instantaneous velocity change with which the floors of support are printed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_support_interface\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && eval(contex.value(\"support_bottom_enable\")) && (eval(contex.value(\"support_enable\")) || eval(contex.value(\"support_tree_enable\")))",
		"limit_to_extruder": "support_bottom_extruder_nr",
		"settable_per_mesh": false,
		"settable_per_extruder": true
	},
	"jerk_prime_tower":
	{
		"label": "Prime Tower Jerk",
		"description": "The maximum instantaneous velocity change with which the prime tower is printed.",
		"unit": "mm/s",
		"type": "float",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print\"))",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_print\"))",
		"enabled": "eval(contex.value(\"prime_tower_enable\")) && eval(contex.value(\"jerk_enabled\"))",
		"settable_per_mesh": false
	},
	"jerk_travel":
	{
		"label": "Travel Jerk",
		"description": "The maximum instantaneous velocity change with which travel moves are made.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_travel\"))",
		"value": "eval(contex.value(\"magic_spiralize\"))==true ? eval(contex.value(\"jerk_print\")):30",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"parameter_level": "2",
		"settable_per_mesh": false
	},
	"jerk_layer_0":
	{
		"label": "Initial Layer Jerk",
		"description": "The print maximum instantaneous velocity change for the initial layer.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "8",
		"value": "eval(contex.value(\"jerk_print\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print_layer_0\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"settable_per_mesh": true,
		"parameter_level": "2"
	},
	"jerk_print_layer_0":
	{
		"label": "Initial Layer Print Jerk",
		"description": "The maximum instantaneous velocity change during the printing of the initial layer.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_layer_0\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_print_layer_0\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"parameter_level": "4",
		"settable_per_mesh": true
	},
	"jerk_travel_layer_0":
	{
		"label": "Initial Layer Travel Jerk",
		"description": "The acceleration for travel moves in the initial layer.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "20",
		"value": "eval(contex.value(\"jerk_layer_0\")) * eval(contex.value(\"jerk_travel\")) / eval(contex.value(\"jerk_print\"))",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"speed_travel_layer_0\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\"))",
		"settable_per_extruder": true,
		"parameter_level": "4",
		"settable_per_mesh": false
	},
	"jerk_skirt_brim":
	{
		"label": "Skirt/Brim Jerk",
		"description": "The maximum instantaneous velocity change with which the skirt and brim are printed.",
		"unit": "mm/s",
		"type": "float",
		"default_value": "20",
		"minimum_value": "0",
		"maximum_value_warning": "eval(contex.value(\"skirt_brim_speed\"))",
		"value": "eval(contex.value(\"jerk_layer_0\"))",
		"enabled": "eval(contex.value(\"jerk_enabled\")) && (getEnumValue(\"adhesion_type\") == 'skirt' || getEnumValue(\"adhesion_type\") == 'brim' || eval(contex.value(\"draft_shield_enabled\")) || eval(contex.value(\"ooze_shield_enabled\")))",
		"settable_per_mesh": false,
		"parameter_level": "2",
		"limit_to_extruder": "adhesion_extruder_nr"
	},
	"acceleration_limit_mess_enable":
	{
		"label": "Acceleration Limit Volume Enable",
		"description": "Acceleration Limit Volume Enable",
		"type": "bool",
		"default_value": "false",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	},
	"acceleration_limit_mess":
	{
		"label": "Acceleration Limit Volume",
		"description": "Acceleration Limit Volume",
		"unit": "[[kg,mm/s²]]",
		"type": "str",
		"default_value": "[[0.5,6000],[1.0,5000],[2.0,4000],[3.0,3000],[4.0,2000],[6.0,1000]]",
		"parameter_level": "4",
		"enabled": "eval(contex.value(\"acceleration_limit_mess_enable\"))",
		"settable_per_mesh": false,
		"settable_per_extruder": false
	}
}